@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    @Html.Partial("~/Views/Shared/Head.cshtml")
    <link rel="stylesheet" href="~/Content/web.play.with.me.table.show.data.css">
    <style>
        .fjavmsiin89{
            color:aqua;
        }
        .ffxafj8kafn8{
            color:red;
        }
        .cvAncz980 {
            display: flex;
        }
        .pro-status {
            margin-right: 20px;
            display: flex;
            align-items: center;
        }
        .kmaZvc29 {
            margin-left: 20px;
        }
    </style>
</head>
<body>
    <div id="biggestContainer">
        <div class="config-max-width padding-container">
            @Html.Partial("~/Views/Shared/Product/SearchParameter.cshtml")

            <button type="button" onclick="Search()">Tìm kiếm</button>

            @Html.Partial("~/Views/Shared/Product/SearchResult.cshtml")
        </div>
    </div>
    <script src="~/Scripts/web.play.with.me.update.width.js"></script>
    <script src="~/Scripts/web.play.with.me.common.js"></script>
    <script>
        // Tham số tìm kiếm
        let publisher;
        let codeOrBarcode;
        let name;
        let combo;
        let proStatus;
        let listProduct = [];// Kết quả trả về

        GetListPublisher();
        GetListProductName();
        GetListCombo();

        // Mục đích lấy số lượng trong kết quả trả về phục vụ phân trang
        async function Search() {
            listProduct = [];// làm trống

            let url = "/Product/SearchProduct";
            const searchParams = new URLSearchParams();
            SetSearchParameter(searchParams);
            ShowCircleLoader();
            let responseDB = await RequestHttpGetPromise(searchParams, url);
            RemoveCircleLoader();
            if (responseDB.responseText != "null") {
                // Kết quả trả về đã được sắp xếp tăng dần tồn kho
                listProduct = JSON.parse(responseDB.responseText);
            }

            // Lấy số lượng sản phẩm trong kết quả trả về
            let length = listProduct.length;
            if (length == 0) {
                document.getElementById("empty-result").style.display = "block";
                document.getElementById("search-result").style.display = "none";
                return;
            }

            document.getElementById("empty-result").style.display = "none";
            document.getElementById("search-result").style.display = "block";
            ShowSearchingResult(listProduct);
        }

        function SetSearchParameter(searchParams) {
            publisher = GetValueInputById("publisher-id", "");
            codeOrBarcode = GetValueInputById("code-or-isbn", "");
            name = GetValueInputById("product-name-id", "");
            combo = GetValueInputById("combo-id", "");
            proStatus = document.querySelector('input[name="status-avxgbhf"]:checked').value

            searchParams.append("publisher", publisher);
            searchParams.append("codeOrBarcode", codeOrBarcode);
            searchParams.append("name", name);
            searchParams.append("combo", combo);
            searchParams.append("status", proStatus);
        }

        function ShowSearchingResult(list) {
            document.getElementById("count-result").innerHTML = "";
            // Làm trống bảng
            DeleteRowsExcludeHead(document.getElementById("myTable"));

            let length = list.length;
            if (length == 0)
                return;
            document.getElementById("count-result").innerHTML = length + " sản phẩm";
            // Show
            let table = document.getElementById("myTable");

            for (let i = 0; i < length; i++) {
                let product = list[i];
                let row = table.insertRow(-1);

                // Insert new cells (<td> elements)
                let cell1 = row.insertCell(0);
                let cell2 = row.insertCell(1);
                let cell3 = row.insertCell(2);
                let cell4 = row.insertCell(3);

                // Id
                cell1.innerHTML = product.id;
                cell1.style.display = "none";

                // Image
                let img = document.createElement("img");
                if (product.imageSrc.length > 0) {
                    img.setAttribute("src", Get320VersionOfImageSrc(product.imageSrc[0]));
                } else {
                    img.setAttribute("src", srcNoImageThumbnail);
                }
                img.height = thumbnailHeight;
                img.width = thumbnailWidth;
                img.className = "go-to-detail-product";
                img.onclick = function () {
                    // Lấy id
                    let id = Number(this.parentElement.parentElement.children[0].innerHTML);
                    GoToDetailItem(id);
                };
                cell2.append(img);

                // Tên
                let pName = document.createElement("p");
                pName.innerHTML = product.name;
                if (product.status == 2)// ngừng kinh doanh
                {
                    pName.className = "fjavmsiin89";
                }
                else if (product.quantity == 0) {
                    pName.className = "ffxafj8kafn8";
                }
                //pName.className = "go-to-detail-product";
                //pName.onclick = function () {
                //    // Lấy id
                //    let id = Number(this.parentElement.parentElement.children[0].innerHTML);
                //    GoToDetailItem(id);
                //};
                cell3.append(pName);

                // Tồn kho
                let pQuantity = document.createElement("p");
                pQuantity.innerHTML = product.quantity;
                if (product.quantity == 0) {
                    pQuantity.className = "ffxafj8kafn8";
                }
                cell4.append(pQuantity);
            }
        }

        function GoToDetailItem(id) {
            if (isNaN(id))
                return;

            window.open("UpdateDelete?id=" + id);
        }

        function ArrangeQuantity() {
            length = listProduct.length;
            if (length == 0) {
                return;
            }

            let listProductTemp = [];
            for (let i = 0; i < length - 1; i++) {
                listProductTemp.push(listProduct[length - 1 - i]);
            }
            listProduct = listProductTemp;

            ShowSearchingResult(listProduct);
        }
    </script>
</body>
</html>

