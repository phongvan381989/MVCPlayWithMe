@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    @Html.Partial("~/Views/Shared/Head.cshtml")
    <link rel="stylesheet" href="~/Content/web.play.with.me.table.show.data.css">
    <style>
        .pro-status {
            margin-right: 20px;
            display: flex;
            align-items: center;
        }

        .fmx09gx8 {
            background-color: white;
            padding: 10px;
            margin: 10px 0px 10px 0px;
            border-radius: 2px;
            display: flex;
            flex-wrap: wrap;
        }

        .gfdgfghxg676 {
            width: 120px;
        }

        .xvxvxkshubnx {
            padding: 10px 20px;
            font-size: 16px;
            border: none; /* Bỏ border */
            border-radius: 2px;
            color: white;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <div id="biggestContainer">
        <div class="config-max-width padding-container">
            <div>
                <div>
                    <label for="publisher-id">Nhà phát hành:</label>
                    <input list="list-Publisher" class="config-max-width margin-vertical"
                           id="publisher-id" onchange="ChangePublisher()">
                    <datalist id="list-Publisher"></datalist>
                </div>
                <br>
                <div id="anzgnsg88720n">
                    <div>
                        <label for="code-or-isbn">Mã sản phẩm hoặc ISBN:</label><br>
                        <input class="config-max-width margin-vertical" type="text" id="code-or-isbn" value="">
                    </div>
                    <br>

                    @Html.Partial("~/Views/Shared/ProductNameSelect.cshtml")
                    <br>
                    @Html.Partial("~/Views/Shared/ComboSelect.cshtml")
                </div>

                <div style="margin:10px;">
                    <div>
                        <input type="checkbox" id="checkbox-on-off-dont-sell" onclick="OnOffSearchDontSellOnECommerce()">
                        <label for="checkbox-on-off-dont-sell">Tìm sản phẩm chưa đăng bán</label>
                    </div>
                    <div style="margin-bottom:10px;"id="xmskgjskjp0258">
                        @Html.Partial("~/Views/Shared/ECommerceType.cshtml")
                        <div>
                            <button type="button" style="margin-left: 30px; margin-right:10px;"
                                    title="Sản phẩm trong kho chưa đăng bán trên sàn thương mại điện tử.
                        Kết quả trả về được sắp xếp tồn kho tăng dần. Chọn nhà phát hành để lọc sau khi lấy được tất cả"
                                    onclick="SearchDontSellOnECommerce(false)">
                                Chưa đăng bán
                            </button>

                            <button type="button" title="Sản phẩm trong kho chưa đăng bán trên sàn thương mại điện tử.
                        Kết quả trả về được sắp xếp tồn kho tăng dần. Chọn nhà phát hành để lọc sau khi lấy được tất cả"
                                    onclick="SearchDontSellOnECommerce(true)">
                                Chưa đăng bán riêng lẻ.
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <div style="position:relative;">
                <button type="button" title="Kết quả lọc theo nhà phát hành, mã, ISBN, tên và tên combo.
                        Kết quả trả về được sắp xếp tồn kho tăng dần."
                        onclick="SearchProduct()" id="nfkalzu9825">
                    Tìm kiếm
                </button>
                <button type="button" title="Cập nhật số lượng theo danh sách hiển thị bên dưới."
                        style="position: absolute; right:10px;"
                        onclick="UpdateQuantityFromListBelow()">
                    Cập nhật tồn kho
                </button>
            </div>
            <br />

            <div>
                <div id="empty-result" style="display:none">
                    <p>Kết quả trống</p>
                </div>
                <div id="search-result" style="display:none">
                    <div class="fmx09gx8">
                        <div class="pro-status">
                            <input type="radio" id="status-all" name="status-avxgbhf"
                                   class="margin-left20" checked
                                   onchange="FilterProductAll()">
                            <label for="status-all">Tất Cả</label>
                        </div>
                        <div class="pro-status">
                            <input type="radio" id="status-normal" name="status-avxgbhf"
                                   class="margin-left20"
                                   onchange="FilterProductNormal()">
                            <label for="status-normal">Đang Bán</label>
                        </div>
                        <div class="pro-status">
                            <input type="radio" id="status-banned" name="status-avxgbhf"
                                   class="margin-left20"
                                   onchange="FilterProductDisable()">
                            <label for="status-banned">Dừng Bán</label>
                        </div>

                        <div class="pro-status"
                             title="Sản phẩm có tồn kho bằng 0. Bao gồm cả sản phẩm dừng kinh doanh">
                            <input type="radio" id="quantity-zero" name="status-avxgbhf"
                                   class="margin-left20"
                                   onchange="FilterProductQuantityZero()">
                            <label for="quantity-zero">Hết Hàng</label>
                        </div>

                        <div class="pro-status"
                             title="Sản phẩm có tồn kho bằng 0. Không bao gồm sản phẩm dừng kinh doanh">
                            <input type="radio" id="quantity-zero-disable" name="status-avxgbhf"
                                   class="margin-left20"
                                   onchange="FilterProductNormalQuantityZero()">
                            <label for="quantity-zero-disable">Đang Bán Và Hết Hàng</label>
                        </div>

                        <div class="pro-status">
                            <input type="radio" id="pro-no-price" name="status-avxgbhf"
                                   class="margin-left20"
                                   title="Sản phẩm có giá bằng 0, thậm chí nhỏ hơn 0"
                                   onchange="FilterProductNoPrice()">
                            <label for="pro-no-price">Chưa Set Giá</label>
                        </div>

                        <div class="pro-status">
                            <input type="radio" id="fzadgfgrj9567af" name="status-avxgbhf" class="margin-left20"
                                   title="Giá bán có giá lớn hơn hoặc bằng giá trị bên cạnh"
                                   onchange="FilterProductPriceBigger()">
                            <label for="fzadgfgrj9567af">Giá Lớn Hơn</label>
                            <input type="number" class="price-bigger gfdgfghxg676"
                                   value="0" />
                            <label>đ</label>
                        </div>

                        <div class="pro-status">
                            <input type="radio" id="ghjsf834gh5sg" name="status-avxgbhf" class="margin-left20"
                                   title="Giá bán nhỏ hơn hoặc bằng giá trị bên cạnh"
                                   onchange="FilterProductPriceSmaller()">
                            <label for="ghjsf834gh5sg">Giá Nhỏ Hơn</label>
                            <input type="number" class="price-smaller gfdgfghxg676"
                                   value="0" />
                            <label>đ</label>
                        </div>
                    </div>
                    <div id="count-result"></div>
                    <table id="myTable">
                        <tr>
                            <th style="display:none">productId</th>
                            <th style="width:200px">Ảnh</th>
                            <th title="Tên đỏ biểu hiện sản phẩm hết hàng, xanh lơ biểu hiện không kinh doanh">Tên</th>
                            <th title="Click để sắp xếp các sản phẩm ĐANG HIỂN THỊ cùng combo cạnh nhau, tên combo id tăng dần"
                                style="cursor:pointer;" onclick="ArrangeCombo()">Tên Combo</th>
                            <th> Giá Bìa</th>
                            <th title="Đỏ biểu hiện số lượng tồn kho là 0. Click để sắp xếp tăng hoặc giảm dần tồn kho sản phẩm ĐANG HIỂN THỊ"
                                style="cursor:pointer;" onclick="ArrangeQuantity()">Số Lượng</th>
                            <th title="Bật hoặc tắt sản phẩm"> Bật/Tắt</th>
                            <th style="display:none;">comboId</th>
                        </tr>
                    </table>
                </div>
            </div>
        </div>
    </div>
    <script src="~/Scripts/web.play.with.me.update.width.js"></script>
    <script src="~/Scripts/web.play.with.me.common.js"></script>
    <script src="~/Scripts/web.play.with.me.action.common.js"></script>
    <script>
        // Tham số tìm kiếm
        let publisher;
        let codeOrBarcode;
        let name;
        let combo;
        let proStatus;
        let listProduct = [];// Kết quả trả về
        // Lưu giá trị của listProduct khi listProduct cần thay đổi sau khi lấy tất cả sản phẩm chưa đăng
        // bán trên sàn, cần lọc theo nhà phát hành
        let listProductTemp = []
        let listProductWillShow = []; //  Kết quả sau khi lọc hiển thị ra màn hình

        InitializeSomething();
        GetListPublisher();
        GetListProductName();
        GetListCombo();

        OnOffSearchDontSellOnECommerce();

        function InitializeSomething() {
            // Xóa lựa chọn tất cả
            document.getElementById("container-all-e-ecommonerce-type").remove();
            // Chọn SHOPEE
            document.getElementById("shopee-e-ecommonerce-type").checked =  true;
        }

        function RefreshResultView() {
            document.getElementById("empty-result").style.display = "none";
            document.getElementById("search-result").style.display = "none";

            document.getElementById("count-result").innerHTML = "";
            let table = document.getElementById("myTable");
            // Làm trống bảng
            DeleteRowsExcludeHead(table);

            // Làm mới input
            document.getElementById("publisher-id").value = "";
            document.getElementById("code-or-isbn").value = "";
            document.getElementById("product-name-id").value = "";
            document.getElementById("combo-id").value = "";
        }

        function OnOffSearchDontSellOnECommerce() {
            if (DEBUG) {
                console.log("OnOffSearchDontSellOnECommerce CALL");
            }
            let checkBox = document.getElementById("checkbox-on-off-dont-sell");
            if (checkBox.checked == true) {
                document.getElementById("xmskgjskjp0258").style.display = "block";
                document.getElementById("anzgnsg88720n").style.display = "none";
                document.getElementById("nfkalzu9825").disabled = true;
            } else {
                document.getElementById("xmskgjskjp0258").style.display = "none";
                document.getElementById("anzgnsg88720n").style.display = "block";
                document.getElementById("nfkalzu9825").disabled = false;
            }
            RefreshResultView();
            ResfreshListData();
        }

        // Hiển thị kết quả đã tìm kiếm sản phẩm chưa bán theo nhà phát hành
        function ChangePublisher() {
            if (DEBUG) {
                console.log("ChangePublisher CALL");
            }
            let checkBox = document.getElementById("checkbox-on-off-dont-sell");
            if (checkBox.checked == true) {
                let publisherId = GetDataIdFromPublisherDatalist(document.getElementById("publisher-id").value);
                if (publisherId != null) {
                    listProduct = [];
                    let length = listProductTemp.length;

                    if (DEBUG) {
                        console.log("listProductTemp.length: " + length);
                        console.log(JSON.stringify(listProductTemp));
                    }

                    // Lấy tất cả sản phẩm chưa được đăng bán thuộc 1 nhà phát hành
                    for (let i = 0; i < length; i++) {
                        if (listProductTemp[i].publisherId == publisherId) {
                            listProduct.push(listProductTemp[i]);
                        }
                    }

                    document.getElementById("status-all").checked = true;
                    FilterProductAll();
                }
            }
        }

        async function SearchProductCore(url, searchParams) {
            ShowCircleLoader();
            let responseDB = await RequestHttpGetPromise(searchParams, url);
            RemoveCircleLoader();
            if (responseDB.responseText != "null") {
                // Kết quả trả về có thể được sắp xếp tăng dần tồn kho, hoặc theo combo, tồn kho
                listProduct = JSON.parse(responseDB.responseText);
                listProductTemp = listProduct;
            }
            else {
                ResfreshListData();
            }

            // Lấy số lượng sản phẩm trong kết quả trả về
            let length = listProduct.length;
            if (length == 0) {
                document.getElementById("empty-result").style.display = "block";
                document.getElementById("search-result").style.display = "none";
                return;
            }

            document.getElementById("empty-result").style.display = "none";
            document.getElementById("search-result").style.display = "block";
            document.getElementById("status-all").checked = true;
            FilterProductAll();
        }

        function ResfreshListData() {
            listProduct = [];// danh sách server trả về sắp xếp tồn kho tăng dần
            listProductTemp = [];
            listProductWillShow = [];// danh sách sau khi lọc và được hiển thị
        }

        // Mục đích lấy số lượng trong kết quả trả về phục vụ phân trang
        function SearchProduct() {
            ResfreshListData();

            let url = "/Product/SearchProduct";
            const searchParams = new URLSearchParams();
            SetSearchParameter(searchParams);
            SearchProductCore(url, searchParams);
        }

        async function UpdateQuantityFromListBelow() {

            let text = "Bạn chắc chắn cập nhật cho tất cả sản phẩm trong danh sách bên dưới?";
            if (confirm(text) == false)
                return;

            let listId = [];
            let listQuantity = [];
            let rows = document.getElementsByClassName("axvsg892757");
            for (let i = 0; i < rows.length; i++) {
                if (!isEmptyOrSpaces(rows[i].cells[5].getElementsByTagName("input")[0].value)) {
                    listId.push(parseInt(rows[i].cells[0].innerHTML));
                    listQuantity.push(rows[i].cells[5].getElementsByTagName("input")[0].value);
                }
            }
            if (listId.length == 0) {
                alert("Danh sách trống.");
                return;
            }

            //if (DEBUG) {
            //    console.log("listId: " + JSON.stringify(listId));
            //    console.log("listQuantity: " + JSON.stringify(listQuantity));
            //}

            let url = "/Product/UpdateQuantityFromListBelow";
            const searchParams = new URLSearchParams();
            searchParams.append("listId", listId);
            searchParams.append("listQuantity", listQuantity);
            try {
                // Cập nhật vào db
                ShowCircleLoader();
                let responseDB = await RequestHttpPostPromise(searchParams, url);
                RemoveCircleLoader();
                CheckStatusResponseAndShowPrompt(responseDB.responseText, "Cập nhật thành công.", "Cập nhật thất bại.");
            }
            catch (error) {
                CreateMustClickOkModal("Cập nhật lỗi ở đâu đó.", null);
                return;
            }
        }

        function SetSearchParameter(searchParams) {
            publisher = GetValueInputById("publisher-id", "");
            codeOrBarcode = GetValueInputById("code-or-isbn", "");
            name = GetValueInputById("product-name-id", "");
            combo = GetValueInputById("combo-id", "");
            //proStatus = document.querySelector('input[name="status-avxgbhf"]:checked').value

            searchParams.append("publisher", publisher);
            searchParams.append("codeOrBarcode", codeOrBarcode);
            searchParams.append("name", name);
            searchParams.append("combo", combo);
        }

        // Cập nhật màu nền dựa trên text
        function UpdateOnOffButtonStyle(btn) {
            if (btn.textContent === "Bật") {
                btn.style.backgroundColor = "green"; // Nền xanh
                btn.title = "Bật sản phẩm để bán";
            } else if (btn.textContent === "Tắt") {
                btn.style.backgroundColor = "red"; // Nền đỏ
                btn.title = "Tắt sản phẩm để dừng bán";
            }
        }

        // Cập nhật màu tên sản phẩm dựa theo trạng thái kinh doanh, ngừng kinh doanh, tồn kho
        function UpdateProductNameStyle(p, status, quantity) {
            if (status == 2)// ngừng kinh doanh
            {
                p.style.color = "aqua";
            }
            else if (quantity == 0) {
                p.style.color = "red";
            }
            else {
                p.style.color = "initial";
            }
        }

        function ShowSearchingResult(list) {
            document.getElementById("count-result").innerHTML = "";
            let table = document.getElementById("myTable");
            // Làm trống bảng
            DeleteRowsExcludeHead(table);

            let length = list.length;
            document.getElementById("count-result").innerHTML = length + " sản phẩm";
            if (length == 0)
                return;

            // Show
            for (let i = 0; i < length; i++) {
                let product = list[i];
                let row = table.insertRow(-1);
                row.className = "axvsg892757";

                // Insert new cells (<td> elements)
                let cell1 = row.insertCell(0);
                let cell2 = row.insertCell(1);
                let cell3 = row.insertCell(2);
                let cell4 = row.insertCell(3);
                let cell5 = row.insertCell(4);
                let cell6 = row.insertCell(5);
                let cell7 = row.insertCell(6);
                let cell8 = row.insertCell(7);

                // Id
                cell1.innerHTML = product.id;
                cell1.style.display = "none";

                // Image
                let img = document.createElement("img");
                if (product.imageSrc.length > 0) {
                    img.setAttribute("src", Get320VersionOfImageSrc(product.imageSrc[0]));
                } else {
                    img.setAttribute("src", srcNoImageThumbnail);
                }
                img.height = thumbnailHeight;
                img.width = thumbnailWidth;
                img.className = "go-to-detail-product";
                img.onclick = function () {
                    // Lấy id
                    let id = Number(this.parentElement.parentElement.children[0].innerHTML);
                    GoToDetailItem(id);
                };
                cell2.append(img);

                // Tên
                let pName = document.createElement("p");
                //pName.className = "go-to-detail-product";
                pName.innerHTML = product.name;

                UpdateProductNameStyle(pName, product.status, product.quantity);

                cell3.append(pName);

                // Tên combo
                let pComboName = document.createElement("p");
                pComboName.className = "go-to-detail-product";
                pComboName.title = "Xem thông tin combo của sản phẩm"
                if (product.comboName == "null" || product.comboName.length == 0) {
                    pComboName.innerHTML = "";
                }
                else {
                    pComboName.innerHTML = product.comboName;
                }

                pComboName.onclick = function () {
                    // Lấy combo id
                    let childrenOfRow = this.parentElement.parentElement.children;
                    let id = Number(childrenOfRow[childrenOfRow.length - 1].innerHTML);
                    if (isNaN(id) || id == -1) {
                        CreateMustClickOkModal("Sản phẩm không thuộc combo nào hoặc không lấy được thông tin combo.")
                        return;
                    }
                    window.open("/Combo/UpdateDelete?id=" + id);
                };
                cell4.append(pComboName);

                // Giá Bìa
                cell5.innerHTML = product.bookCoverPrice;

                // Tồn kho
                // Cho phép chỉnh sửa tồn kho sau đó cập nhật toàn bộ.
                let pQuantity = document.createElement("input");
                pQuantity.type = "number";
                pQuantity.value = product.quantity;
                pQuantity.title = "Để trống sẽ không được cập nhật.";
                if (product.quantity == 0) {
                    pQuantity.style.color = "red";
                }
                cell6.append(pQuantity);

                // Bật tắt sản phẩm
                // Tạo button
                let button = document.createElement('button');
                button.className = "xvxvxkshubnx";
                button.product = product;
                button.pName = pName;
                // Gán text mặc định
                if (product.status == 2) {
                    button.textContent = "Bật";
                }
                else {
                    button.textContent = "Tắt";
                }

                // Gọi hàm để thiết lập màu nền ban đầu
                UpdateOnOffButtonStyle(button);

                // Thêm sự kiện click để thay đổi trạng thái
                button.addEventListener('click', async function () {
                    if (!this.product.status != 2) { // Đang bật, muốn tắt phải hỏi lại cho chắc
                        let text = "Bạn chắc chắn muốn NGƯNG BÁN sản phẩm này?";
                        if (confirm(text) == false)
                            return;
                    }

                    let newProductStatus = 0;
                    if (this.product.status == 2) { // đang tắt cần bật
                        newProductStatus = 0;
                    }
                    else {// đang bật cần tắt
                        newProductStatus = 2;
                    }
                    let isOK = await UpdateStatusOfProduct(this.product.id, newProductStatus);
                    if (isOK) {
                        this.product.status = newProductStatus;
                        this.textContent = this.textContent === "Bật" ? "Tắt" : "Bật";
                        UpdateOnOffButtonStyle(this);
                        // thay đổi màu tên sản phẩm
                        UpdateProductNameStyle(this.pName, newProductStatus, this.product.quantity);
                    }
                });

                // Gắn button vào cell 7
                cell7.append(button);

                // Combo Id
                cell8.innerHTML = product.comboId;
                cell8.style.display = "none";
            }
        }

        // Khi cập nhật mapping, sản phẩm trong kho ta load lại
        async function OnOffStatusOfProduct(id, statusOfProduct) {
            if (currentOrder === null) {
                CreateMustClickOkModal("Chưa chọn đơn hàng nào.", null);
                return;
            }

            const searchParams = new URLSearchParams();
            searchParams.append("commonOrder", JSON.stringify(currentOrder));

            let query = "/ProductECommerce/ReloadOneOrder";

            ShowCircleLoader();
            let responseDB = await RequestHttpPostPromise(searchParams, query);
            RemoveCircleLoader();
            if (responseDB.responseText == "null") {
                await CreateMustClickOkModal("Không lấy được đơn hàng. Thử lại sau.", null);
                return;
            }

            // đơn hàng hiện tại sau cập nhật
            let currentOrderNew = JSON.parse(responseDB.responseText);
            currentOrder.listMapping = currentOrderNew.listMapping;

            ShowOneOrderOnModal(currentOrder);
        }

        function GoToDetailItem(id) {
            if (isNaN(id))
                return;

            window.open("UpdateDelete?id=" + id);
        }

        function ArrangeQuantity() {
            let length = listProductWillShow.length;
            if (length == 0) {
                return;
            }

            let listProductTemp = [];
            let lengthTemp = 0;
            let indexAdd = 0;
            // listProductWillShow được lọc sắp xếp tăng dần quantity
            for (let i = 0; i < length; i++) {
                lengthTemp = listProductTemp.length;
                indexAdd = -1;
                for (let j = lengthTemp - 1; j >= 0; j--) {
                    if (listProductWillShow[i].quantity >= listProductTemp[j].quantity) {
                        indexAdd = j;
                        break;
                    }
                }
                if (indexAdd == -1) {
                    listProductTemp.splice(0, 0, listProductWillShow[i]);
                }
                else {
                    listProductTemp.splice(indexAdd + 1, 0, listProductWillShow[i]);
                }
            }

            listProductWillShow = listProductTemp;
            ShowSearchingResult(listProductWillShow);
        }

        function ArrangeCombo() {
            let length = listProductWillShow.length;
            if (length == 0) {
                return;
            }

            let listProductTemp = [];
            let lengthTemp = 0;
            let indexAdd = 0;
            // listProductWillShow được lọc sắp xếp tăng dần combo id
            for (let i = 0; i < length; i++) {
                lengthTemp = listProductTemp.length;
                indexAdd = -1;
                for (let j = lengthTemp - 1; j >= 0; j--) {
                    if (listProductWillShow[i].comboId >= listProductTemp[j].comboId) {
                        indexAdd = j;
                        break;
                    }
                }
                if (indexAdd == -1) {
                    listProductTemp.splice(0, 0, listProductWillShow[i]);
                }
                else {
                    listProductTemp.splice(indexAdd + 1, 0, listProductWillShow[i]);
                }
            }

            listProductWillShow = listProductTemp;
            ShowSearchingResult(listProductWillShow);
        }

        function FilterProductAll() {
            listProductWillShow = listProduct;
            ShowSearchingResult(listProductWillShow);
        }

        function FilterProductNormal() {
            listProductWillShow = [];
            let length = listProduct.length;
            if (length == 0)
                return;
            for (let i = 0; i < length; i++) {
                if (listProduct[i].status == 0) {
                    listProductWillShow.push(listProduct[i]);
                }
            }
            ShowSearchingResult(listProductWillShow);
        }

        function FilterProductDisable() {
            listProductWillShow = [];
            let length = listProduct.length;
            if (length == 0)
                return;
            for (let i = 0; i < length; i++) {
                if (listProduct[i].status != 0) {
                    listProductWillShow.push(listProduct[i]);
                }
            }
            ShowSearchingResult(listProductWillShow);
        }

        function FilterProductQuantityZero() {
            listProductWillShow = [];
            let length = listProduct.length;
            if (length == 0)
                return;
            for (let i = 0; i < length; i++) {
                if (listProduct[i].quantity == 0) {
                    listProductWillShow.push(listProduct[i]);
                }
            }
            ShowSearchingResult(listProductWillShow);
        }

        function FilterProductNormalQuantityZero() {
            listProductWillShow = [];
            let length = listProduct.length;
            if (length == 0)
                return;
            for (let i = 0; i < length; i++) {
                if (listProduct[i].quantity == 0 && listProduct[i].status == 0) {
                    listProductWillShow.push(listProduct[i]);
                }
            }
            ShowSearchingResult(listProductWillShow);
        }

        function FilterProductPriceBigger() {
            let checkedPrice = document.getElementsByClassName("price-bigger")[0].value;
            listProductWillShow = [];
            let length = listProduct.length;
            if (length == 0)
                return;
            for (let i = 0; i < length; i++) {
                if (listProduct[i].bookCoverPrice >= checkedPrice) {
                    listProductWillShow.push(listProduct[i]);
                }
            }
            ShowSearchingResult(listProductWillShow);
        }

        function FilterProductPriceSmaller() {
            let checkedPrice = document.getElementsByClassName("price-smaller")[0].value;
            listProductWillShow = [];
            let length = listProduct.length;
            if (length == 0)
                return;
            for (let i = 0; i < length; i++) {
                if (listProduct[i].bookCoverPrice <= checkedPrice) {
                    listProductWillShow.push(listProduct[i]);
                }
            }
            ShowSearchingResult(listProductWillShow);
        }

        function FilterProductNoPrice() {
            listProductWillShow = [];
            let length = listProduct.length;
            if (length == 0)
                return;
            for (let i = 0; i < length; i++) {
                if (listProduct[i].bookCoverPrice <= 0) {
                    listProductWillShow.push(listProduct[i]);
                }
            }
            ShowSearchingResult(listProductWillShow);
        }

        function ECommerceTypeChange() {
            RefreshResultView();
        }

        async function SearchDontSellOnECommerce(isSingle) {
            // Làm mới input publisher
            document.getElementById("publisher-id").value = "";

            let url = "/Product/SearchDontSellOnECommerce";
            const searchParams = new URLSearchParams();
            searchParams.append("isSingle", isSingle);
            searchParams.append("eType", GetECommerceType());
            SearchProductCore(url, searchParams);
        }
    </script>
</body>
</html>

