@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    @Html.Partial("~/Views/Shared/Head.cshtml")
    <link rel="stylesheet" href="~/Content/web.play.with.me.table.show.data.css">
</head>
<body>

    <div id="biggestContainer">
        <div class="config-max-width padding-container" id="result-find-id">
            @Html.Partial("~/Views/Shared/ProductInput.cshtml")
            <div class="config-max-width">
                <br />
                <button type="button" onclick="MappingOfProduct()"
                        title="Xem sản phẩm liên kết trên sàn Tiki, Shopee, Lazada">
                    Sản Phẩm Liên Kết Trên Sàn
                </button>
                <button type="button" style="margin-left: 30px;" onclick="UpdateProductPromise()">Cập Nhật</button>
                <button type="button" style="margin-left: 30px;"
                        title="Sản phẩm chỉ có thế xóa khi đang không liên kết với sản phẩm nào trên
                        Shopee, Tiki, Lazada, web voibenho, trong đơn hàng đã được bán, thông tin nhập xuất thực tế,..."
                        onclick="DeleteProduct()">
                    Xóa
                </button>
            </div>
            <br />
            <div style="margin-bottom: 100px;">
                @Html.Partial("~/Views/Shared/ECommerceType.cshtml")
                @Html.Partial("~/Views/Shared/RowsDistance.cshtml")
                <div>
                    <input type="text" id="product-name-when-creating" class="config-max-width margin-vertical"
                           title="Tên khi tạo sản phẩm trên sàn thương mại:Tiki, Shopee, Lazada,...">
                    <button type="button" style="margin-left: 30px;"
                            title="Tạo sản phẩm trên sàn thương mại điện tử với tên như trên"
                            onclick="CreateProductOnECommerce()">
                        Tạo Sản Phẩm Trên Sàn TMDT Với Tên Trên
                    </button>
                </div>
                @Html.Partial("~/Views/Shared/RowsDistance.cshtml")
                <div id="count-result"></div>
                <table id="myTable">
                    <tr>
                        <th style="display:none"></th>
                        <th>Sàn</th>
                        <th>Mã Đơn Hàng</th>
                        <th>Số Lượng</th>
                        <th>Thời Gian</th>
                    </tr>
                </table>
            </div>
        </div>
        @Html.Partial("~/Views/Shared/DoesntFindId.cshtml")
    </div>
    <script src="~/Scripts/web.play.with.me.update.width.js"></script>
    <script src="~/Scripts/web.play.with.me.common.js"></script>
    <script src="~/Scripts/web.play.with.me.image.video.common.js"></script>
    <script src="~/Scripts/web.play.with.me.product.upload.js"></script>
    <script src="~/Scripts/web.play.with.me.action.common.js"></script>
    <script>
        let listOutput = [];
        ShowUpdateButtonForOne();

        ShowProductFromObject();

        async function ShowProductFromObject() {
            let responseDB = await GetProductFromId(GetValueFromUrlName("id"));
            let product;
            if (responseDB.responseText != "null") {
                GetSomeData();
                product = JSON.parse(responseDB.responseText);
            }
            else {
                ShowDoesntFindId();
                return;
            }
            SetProductInfomation(product);

            document.getElementById("product-name-when-creating").value = GenerateName(product);
        }

        function GenerateName(product) {
            // Tên đăng gồm: Tên combo "-" tên sản phẩm.
            let name = product.comboName + " - " + product.name;

            // Bỏ chữ "combo" ở đầu tên nếu có (không phân biệt hoa thường)
            if (name.trimStart().toLowerCase().startsWith("combo")) {
                // Bỏ từ "combo" ở đầu và loại bỏ khoảng trắng
                name = name.trimStart().substring(5).trim();
            } else {
                // Loại bỏ khoảng trắng nếu không có "combo"
                name = name.trim();
            }

            // Nếu tên có chữ "sách" ở đầu rồi thì thôi, không thêm vào.
            if (!name.toLowerCase().startsWith("sách")) {
                name = "Sách " + name;
            }

            return name;
        }

        function MappingOfProduct() {
            // Lấy id
            let id = GetValueFromUrlName("id");
            window.open("MappingOfProduct?id=" + id);
        }

        GetOutputOfProduct();

        function ECommerceTypeChange() {
            let index = GetIntECommerceType();
            if (DEBUG) {
                console.log("ECommerceTypeChange index: " + index);
            }
            let listOutputTem = [];
            if (index == intAll) {
                listOutputTem = listOutput;
            }
            else {
                let length = listOutput.length;
                for (let i = 0; i < length; i++) {
                    if (listOutput[i].eCommmerce === index) {
                        listOutputTem.push(listOutput[i]);
                    }
                }
            }
            // Show
            ShowListOutput(listOutputTem, document.getElementById("myTable"));
        }

        async function GetOutputOfProduct() {
            // Lấy id
            let id = GetValueFromUrlName("id");

            const searchParams = new URLSearchParams();
            searchParams.append("id", id);

            let query = "/Product/GetOutputOfProduct";

            let responseDB = await RequestHttpPostPromise(searchParams, query);

            if (responseDB.responseText != "null") {
                listOutput = JSON.parse(responseDB.responseText);
            }
            else {
                listOutput = [];
            }

            // Chọn Tất cả
            document.getElementById("all-e-ecommonerce-type").checked = true;

            // Show
            ShowListOutput(listOutput, document.getElementById("myTable"));
        }

        function ShowListOutput(list, table) {
            DeleteRowsExcludeHead(table);

            let length = list.length;
            // Số lượng sản phẩm thực tế bán.
            let realCount = 0;
            let normalOrderCount = 0;
            let cancelOrderCount = 0;

            if (length == 0) {
                document.getElementById("count-result").innerHTML =
                    "Tổng " + length + " đơn. Đơn hoàn thành: " + normalOrderCount + ", đơn hủy: " + cancelOrderCount + " . Số lượng thực tế bán sau khi trừ hoàn hàng: " + realCount + " sản phẩm";
                return;
            }

            for (let i = 0; i < length; i++) {
                let obj = list[i];

                if (obj.isCancel)// đơn hoàn / hủy
                {
                    cancelOrderCount++;
                }
                else {
                    normalOrderCount++;
                    realCount = realCount + obj.quantity;
                }

                let row = table.insertRow(-1);
                // Insert new cells (<td> elements)
                let cell1 = row.insertCell(0);
                let cell2 = row.insertCell(1);
                let cell3 = row.insertCell(2);
                let cell4 = row.insertCell(3);
                let cell5 = row.insertCell(4);

                // Id
                cell1.innerHTML = obj.id;
                cell1.style.display = "none";

                // Sàn
                cell2.innerHTML = GetEEcomnerceNameFromIntType(obj.eCommmerce);

                // Mã đơn hàng
                let p = document.createElement("p");
                p.innerHTML = obj.code;
                if (obj.isCancel)// đơn hoàn / hủy
                {
                    p.style.color = "red";
                    p.title = "Đơn hoàn / hủy";
                }
                //p.style.cursor = "pointer";
                //p.onclick = function () {
                //    let url = "/Product/UpdateDelete?id=" + obj.id.toString();
                //    window.open(url);
                //}
                cell3.append(p);

                // Số lượng
                cell4.innerHTML = obj.quantity;

                // Thời gian
                cell5.innerHTML = obj.time;
            }

            document.getElementById("count-result").innerHTML =
                "Tổng " + length + " đơn. Đơn hoàn thành: " + normalOrderCount + ", đơn hủy: " + cancelOrderCount + " . Số lượng thực tế bán sau khi trừ hoàn hàng: " + realCount + " sản phẩm";
        }

        async function CreateProductOnECommerce() {
            if (!IsValidString(document.getElementById("category-id").value)) {
                CreateMustClickOkModal("Chưa có thông tin thể loại");
                document.getElementById("category-id").focus();
                return;
            }

            if (!IsValidString(document.getElementById("publishing-company-id").value))
            {
                CreateMustClickOkModal("Chưa có thông tin nhà xuất bản");
                document.getElementById("publishing-company-id").focus();
                return;
            }

            if (!IsValidString(document.getElementById("book-language-id").value)) {
                CreateMustClickOkModal("Chưa có thông tin ngôn ngữ");
                document.getElementById("book-language-id").focus();
                return;
            }

            // Lấy id
            let id = GetValueFromUrlName("id");

            const searchParams = new URLSearchParams();
            searchParams.append("id", id);
            searchParams.append("eType", GetECommerceType());
            searchParams.append("name", document.getElementById("product-name-when-creating").value);

            let url = "/Product/CreateProductOnECommerce";

            try {
                // Cập nhật vào db
                ShowCircleLoader();
                let responseDB = await RequestHttpGetPromise(searchParams, url);
                RemoveCircleLoader();
                CheckStatusResponseAndShowPrompt(responseDB.responseText, "Thành công.", "Thất bại.");
            }
            catch (error) {
                CreateMustClickOkModal("Cập nhật lỗi.", null);
                return;
            }
        }
    </script>
</body>
</html>

