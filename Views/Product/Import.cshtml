@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    @Html.Partial("~/Views/Shared/Head.cshtml")
    <link rel="stylesheet" href="~/Content/web.play.with.me.table.show.data.css">
    <style>
        .akfhz95nzk{
            margin:5px 25px 5px 5px;
        }
        .sfxvsg90svx{
            display:flex;
        }
    </style>
</head>
<body @*onload="GetBasicInfoProduct()"*@>
    <div id="biggestContainer">
        <div class="config-max-width padding-container">
            <div>
                <label for="publisher-id">Nhà phát hành:</label>
                <input list="list-Publisher" class="config-max-width margin-vertical"
                       id="publisher-id" onchange="GetBasicInfoProduct()">
                <datalist id="list-Publisher"></datalist>
            </div>
            <br>

            <label for="code-or-isbn">Mã sản phẩm hoặc ISBN:</label><br>
            <input class="config-max-width margin-vertical" type="text" id="code-or-isbn" value="">
            <br>
            @Html.Partial("~/Views/Shared/ProductNameSelect.cshtml")
            <br />
            <div title="Chiết khấu 100% mang ý nghĩa cập nhật số lượng lại đúng thực tế do không
                 rõ sai sót ở đâu. Số lượng có thể là số âm">
                <label for="discount">Chiết khấu(%):</label>
                <div>
                    <input type="number" min="0" max="100" step="5" class="margin-vertical" id="discount" value="0">
                </div>
            </div>
            <br />

            <div class="config-max-width sfxvsg90svx">
                <button type="button" onclick="AddHeadList()" class="akfhz95nzk"
                        title="Thêm sản phẩm vào danh sách nhập kho bên dưới" id="add-head-list">
                    Thêm vào danh sách
                </button>
                <div style="display:none;" title="Nhập Từ File Excel. File excel có định dạng:
            Mã | Tên | Giá Bìa | Chiết Khấu | Giá Bán | Số Lượng | Tổng Tiền">
                    <label for="import-excel-file">Chọn file excel:</label>
                    <input type="file" id="import-excel-file"
                           accept=".xlsx"><br>
                    <button onclick="UploadExcelFile()">Gửi File Excel</button>
                </div>
            </div>
            <br />
            <div class="config-max-width">
                <a href="/Product/Create">Tạo Sản Phẩm Mới Trong Kho</a>
            </div>
            <br />
            <table id="myTable">
                <tr>
                    <th style="display:none"></th>
                    <th style="width:200px">Ảnh</th>
                    <th>Tên</th>
                    <th>Giá Bìa</th>
                    <th>Chiết Khấu</th>
                    <th>Giá Nhập</th>
                    <th>Số Lượng</th>
                    <th></th>
                </tr>
                @*<tr>
                        <td>Maria Anders</td>
                        <td><input type="number"></td>
                        <td><input type="number"></td>
                        <td>Giá bìa</td>
                        <td><button onclick="this.parentElement.parentElement.remove()">Xóa</button></td>
                    </tr>*@
            </table>

            <div class="config-max-width">
                <br />
                <button type="button" onclick="Save()">Lưu</button>
                <button type="button" style="float: right;" onclick="Delete()">Xóa toàn bộ</button>
            </div>
        </div>
    </div>
    <script src="~/Scripts/web.play.with.me.update.width.js"></script>
    <script src="~/Scripts/web.play.with.me.common.js"></script>
    <script>
        // mảng đối tượng product
        let listBasicInfo=[];

        let objBasicInfo;

        // Danh sách đối tượng lưu về db
        let listSaveInfo = [];

        let discount = 0;

        GetListPublisher();

        async function GetBasicInfoProduct() {
            let publisher = GetValueInputById("publisher-id", "");
            const searchParams = new URLSearchParams();
            searchParams.append("publisher", publisher);
            let query = "/Product/GetProductIdCodeBarcodeNameBooCoverkPrice";
            ShowCircleLoader();
            let responseDB = await RequestHttpPostPromise(searchParams, query);
            RemoveCircleLoader();
            if (responseDB.responseText != "null") {
                listBasicInfo = JSON.parse(responseDB.responseText);
            }
            else {
                listBasicInfo = [];
            }
            let ele = document.getElementById("list-product-name");
            SetDataListOfIdName(ele, listBasicInfo);
            document.getElementById("code-or-isbn").value = "";
            document.getElementById("product-name-id").value = "";
        }

        document.getElementById("discount").addEventListener("input", function (event) {
            discount = this.value;
            if (isEmptyOrSpaces(discount))
                discount = 0;
            if (discount < 0)
                discount = 0;
            else if (discount > 100)
                discount = 100;
        });

        document.getElementById("code-or-isbn").addEventListener("keypress", function (event) {
            if (event.key === "Enter") {
                event.preventDefault();
                document.getElementById("add-head-list").click();
            }
        });

        document.getElementById("code-or-isbn").addEventListener("focus", function (event) {
            document.getElementById("product-name-id").value = "";
        });

        document.getElementById("product-name-id").addEventListener("keypress", function (event) {
            if (event.key === "Enter") {
                event.preventDefault();
                document.getElementById("add-head-list").click();
            }
        });

        document.getElementById("product-name-id").addEventListener("focus", function (event) {
            document.getElementById("code-or-isbn").value = "";
        });

        function AddHeadList() {
            objBasicInfo = null;
            let length = listBasicInfo.length;
            if (length == 0) {
                CreateMustClickOkModal("Danh sách sản phẩm chưa được tải về. Vui lòng chọn nhà phát hành, để tải danh sách sản phẩm tương ứng. Hoặc thử lại sau nếu đã chọn nhà phát hành", null);
                return;
            }
            let code = document.getElementById("code-or-isbn").value;
            let name = document.getElementById("product-name-id").value;
            let isCodeOrISBN = false;
            let isProductName = false;

            if (document.activeElement.id === "add-head-list") {
                if (!isEmptyOrSpaces(code)) {
                    isCodeOrISBN = true;
                }
                else if (!isEmptyOrSpaces(name)) {
                    isProductName = true;
                }
                if (!isCodeOrISBN && !isProductName) {
                    CreateMustClickOkModal("Chưa nhập mã, ISBN hoặc tên sản phẩm.", null);
                    return;
                }
            }

            if (document.activeElement.id === "code-or-isbn" || isCodeOrISBN) {
                if (code.length != 13) {
                    CreateMustClickOkModal("Mã sản phẩm hoặc ISBN không chính xác", null);
                    return;
                }
                if (code.substring(0, 2) != "89" &&
                    code.substring(0, 6) != "978604") {
                    CreateMustClickOkModal("Mã sản phẩm hoặc ISBN không chính xác", null);
                    return;
                }
                if (code.substring(0, 2) == "89") {// Tìm theo mã sản phẩm
                    for (let i = 0; i < length; i++) {
                        if (listBasicInfo[i].code === code) {
                            objBasicInfo = listBasicInfo[i];
                            break;
                        }
                    }
                }
                else {// Tìm theo isbn
                    for (let i = 0; i < length; i++) {
                        if (listBasicInfo[i].barcode === code) {
                            objBasicInfo = listBasicInfo[i];
                            break;
                        }
                    }
                }
            }
            else if (document.activeElement.id === "product-name-id" || isProductName) { // Tìm theo tên
                for (let i = 0; i < length; i++) {
                    if (listBasicInfo[i].name === name) {
                        objBasicInfo = listBasicInfo[i];
                        break;
                    }
                }
            }

            if (objBasicInfo != null) { // Thêm vào hàng đầu tiên của table
                // Find a <table> element with id="myTable":
                let table = document.getElementById("myTable");

                // Create an empty <tr> element and add it to the 1st position of the table:
                let row = table.insertRow(1);

                // Insert new cells (<td> elements)
                let cell1 = row.insertCell(0);
                let cell2 = row.insertCell(1);
                let cell3 = row.insertCell(2);
                let cell4 = row.insertCell(3);
                let cell5 = row.insertCell(4);
                let cell6 = row.insertCell(5);
                let cell7 = row.insertCell(6);
                let cell8 = row.insertCell(7);

                // Id
                cell1.innerHTML = objBasicInfo.id;
                cell1.style.display = "none";

                // Image
                let img = document.createElement("img");
                if (objBasicInfo.imageSrc.length > 0) {
                    img.setAttribute("src", Get320VersionOfImageSrc(objBasicInfo.imageSrc[0]));
                } else {
                    img.setAttribute("src", srcNoImageThumbnail);
                }
                img.height = thumbnailHeight;
                img.width = thumbnailWidth;
                img.className = "go-to-detail-product";
                img.onclick = function () {
                    window.open("UpdateDelete?id=" + objBasicInfo.id);
                };
                cell2.append(img);

                // Tên
                cell3.innerHTML = objBasicInfo.name;

                // Giá bìa
                cell4.innerHTML = objBasicInfo.bookCoverPrice;

                // Chiết khấu
                cell5.innerHTML = discount;

                // Giá nhập
                let importPrice = (100 - discount) * objBasicInfo.bookCoverPrice / 100;
                cell6.innerHTML = importPrice;

                // Số lượng nhập
                // Focus vào đây
                let input7 = document.createElement("input");
                input7.type = "number";
                cell7.appendChild(input7);
                input7.focus();
                input7.addEventListener("keypress", function (event) {
                    if (event.key === "Enter") {
                        event.preventDefault();
                        let codeTemp = document.getElementById("code-or-isbn").value;
                        let nameTemp = document.getElementById("product-name-id").value;

                        if (!isEmptyOrSpaces(codeTemp)) {
                            document.getElementById("product-name-id").value = "";
                            document.getElementById("code-or-isbn").focus();
                            document.getElementById("code-or-isbn").select();
                        }
                        else if (!isEmptyOrSpaces(nameTemp)) {
                            document.getElementById("code-or-isbn").value = "";
                            document.getElementById("product-name-id").focus();
                            document.getElementById("product-name-id").select();
                        }
                    }
                });

                // Nút xóa
                let btn = document.createElement("button");
                btn.onclick = function () {
                    this.parentElement.parentElement.remove();
                };
                btn.innerHTML = "Xóa";
                cell8.appendChild(btn)

                //alert(JSON.stringify(objBasicInfo));
            }
            else {
                CreateMustClickOkModal("Không tìm thấy sản phẩm phù hợp", null);
            }
        }

        // Constructor function for objects
        function objImport(productId, price, quantity, bookCoverPrice, discount) {
            this.productId = productId;
            this.price = price;
            this.quantity = quantity;
            this.bookCoverPrice = bookCoverPrice;
            this.discount = discount;
        }

        // Lưu db
        async function Save() {
            listSaveInfo = [];
            let rows = document.getElementById("myTable").rows;
            let length = rows.length;
            for (let i = 1; i < length; i++) {
                let obj = new objImport(
                    Number(rows[i].cells[0].innerHTML),
                    Number(rows[i].cells[5].innerHTML),
                    Number(rows[i].cells[6].childNodes[0].value),
                    Number(rows[i].cells[3].innerHTML),
                    Number(rows[i].cells[4].innerHTML)
                );
                listSaveInfo.push(obj);
            }

            const searchParams = new URLSearchParams();
            searchParams.append("listObject", JSON.stringify(listSaveInfo));
            let url = "/Product/AddImport";

            let responseDB = await RequestHttpPostPromise(searchParams, url);
            if (responseDB.responseText != "null") {
                CheckStatusResponseAndShowPrompt(responseDB.responseText, "Cập nhật thành công", "Cập nhật thất bại");
            }
            else {
                CreateMustClickOkModal("Cập nhật thất bại", null);
            }
        }

        function Delete() {
            let text = "Bạn chắc chắn muốn XÓA dữ liệu nhập kho đang hiển thị?";
            if (confirm(text) == false)
                return;

            DeleteRowsExcludeHead(document.getElementById("myTable"));
        }

        async function UploadExcelFile() {
            let inputExcel = document.getElementById("import-excel-file");
            if (!inputExcel.files.length) {
                CreateMustClickOkModal("Chưa chọn file excel.", null);
                return;
            }

            let url = "/Product/UploadExcelFile";
            let responseDB = await RequestHttpPotstPromiseUploadFile(inputExcel.files[0], url);
            if (responseDB.responseText != "null") {
                let lisImportFromExcel = JSON.parse(responseDB.responseText);
            }
            else {
                CreateMustClickOkModal("Đọc file excel thất bại", null);
            }
        }
    </script>
</body>
</html>

