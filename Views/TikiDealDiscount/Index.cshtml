@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    @Html.Partial("~/Views/Shared/Head.cshtml")
    <link rel="stylesheet" href="~/Content/web.play.with.me.table.show.data.css">
    <link rel="stylesheet" href="~/Content/web.play.with.me.modal.common.css">
    <style>
        .xvxvxkshubnx {
            padding: 10px 20px;
            font-size: 16px;
            border: none; /* Bỏ border */
            border-radius: 2px;
            color: white;
            cursor: pointer;
            background-color: red;
        }
    </style>
</head>
<body>
    <div id="biggestContainer">
        <div class="display-flex-padding1020-flex-warap-wrap">
            <label for="sku-tiki-item" style="margin-right:10px;">sku</label>
            <input type="text" id="sku-tiki-item" style="margin-right:10px;">
            <button type="button" onclick="GetDealDiscountOfSku()" style="margin-right:10px;"
                     title="Từ sku sản phẩm trên sàn tiki, lấy được chương trình giảm giá từ 0.5 năm trước đến 2 năm sau.
             Lưu vào db nếu chưa tồn tại hoặc cập nhật trạng thái nếu đã tồn tại">Lấy Chương Trình Giảm Giá</button>

            <button type="button" onclick="ShowModalFromSku()" style="margin-right:10px;"
                     title="Từ sku sản phẩm trên sàn tiki, tạo chương trình giảm giá">Tạo Chương Trình Giảm Giá</button>

            <button type="button" title="Lưu dữ liệu mới, cập nhật chương trình giảm giá của tất cả sku đang bật bán vào db.
                    Hàm mất thời gian, dữ liệu. CÂN NHẮC?"
                    onclick="SaveDealDiscountOfAllSku()" style="margin-right:10px">
                Lưu Chương Trình Giảm Giá Vào DB
            </button>

            <button type="button" title="Cập nhật deal có trạng thái là đang chạy trên db từ Tiki. Phải làm vậy vì có nhiều deal
                    bị tiki tắt. Ví dụ: Tiki tắt khi deal bắt đầu mà tồn kho sản phẩm bằng 0, sản phẩm bị tắt bán,..."
                    onclick="UpdateDealStatusOfRunningDealOnDB()" style="margin-right:10px;display:initial;">
                Cập Nhật Trạng Thái Của Deal Đang Chạy Từ Tiki
            </button>

            <button type="button" title="Set giá bán (price) về giá bìa (market_price) để chuẩn bị chạy chương trình giảm giá.
                    Trước khi gọi hàm này cần tắt hết các chương trình giảm giá. Hàm mất thời gian,
                    dùng 1 lần để chuẩn hóa lại dữ liệu. CÂN NHẮC"
                    onclick="UpdatePriceToBookCoverPriceOfAll()" style="margin-right:10px;display:none;">
                Cập Nhật Giá Bán Về Giá Bìa
            </button>
        </div>
        <div class="display-flex-padding1020-flex-warap-wrap">
            <button type="button" title="Lấy danh sách sản phẩm đang bật bán và chưa tham gia chương trình
                    giảm giá nào đang chạy, sắp chạy, đã mapping và
                    có tồn kho lớn hơn 0 không tạo deal vì tiki không cho set khi tồn kho = 0
                    Dữ liệu lấy từ DB nên nếu tạo chương trình giảm giá trực tiếp trên nhà bán Tiki
                    và chưa cập nhật thì sẽ không lấy được dữ liệu."
                    onclick="GetItemsNoDealDiscountRunning()" style="margin-right:10px;">
                Sản Phẩm Chưa Giảm Giá Từ DB
            </button>

            <button type="button" id="btnCreateDealForAllInTheTable"
                    title="Tạo chương trình giảm giá cho tất cả sản phẩm chưa có chương trình giảm giá trong danh sách bên dưới.
                    Yêu cầu sản phẩm đã mapping.
                    Chức năng này mất thời gian. Cân nhắc khi sử dụng."
                    onclick="CreateDealForAllInTheTable()" style="margin-right:10px; display:none;">
                Tạo Chương Trình Giảm Giá Tất Cả
            </button>
        </div>
        <div id="id-container-get-deal-discount-of-sku" style="display:none;">
            <table id="myTableGetDealDiscountOfSku">
                <tr>
                    <th style="display:none" title="id chương trình giảm giá trên Tiki">id</th>
                    <th title="Thời điểm bắt đầu chương trình giảm giá">Bắt Đầu</th>
                    <th title="Thời điểm kết thúc chương trình giảm giá">Kết Thúc</th>
                    <th> Giá Bìa</th>
                    <th> Chiết Khấu</th>
                    <th> Giá Bán</th>
                    <th title="Số lượng khuyến mại"> Giới Hạn</th>
                    <th title="Giới hạn đặt hàng mỗi đơn"> Giới Hạn 1 Đơn</th>
                    <th title="INACTIVE = 0 | ACTIVE = 1 | RUNNING = 2 | EXPIRED = 3 | HOT_SALE = 4 | CLOSED = 5 | PAUSED = 6 ">
                        Trạng Thái
                    </th>
                    <th>Tắt</th>
                </tr>
            </table>
        </div>

        <div id="id-container-get-item-no-discount-running" style="display:none;">
            <table id="myTableGetItemsNoDealDiscountRunning">
                <tr>
                    <th style="display:none">id</th>
                    <th>STT</th>
                    <th>Ảnh</th>
                    <th title="Thời điểm kết thúc chương trình giảm giá">Tên</th>
                    <th>SKU</th>
                </tr>
            </table>
        </div>

        <div>
            <!-- The Modal -->
            <div id="myModal" class="modal">
                <!-- Modal content -->
                <div class="modal-content">
                    <div>
                        <span class="close">&times;</span>
                    </div>
                    <div>
                        <label for="bookCoverPrice">Giá bìa:</label>
                        <input type="text" id="bookCoverPrice" name="bookCoverPrice" disabled>VND<br><br>

                        <label for="importDiscount" title="Chiết khấu so với giá bìa khi nhập hàng">Chiết khấu nhập:</label>
                        <input type="number" id="importDiscount" name="importDiscount" step="0.01" min="0" max="100" disabled>%<br><br>

                        <label for="taxFeePercent">Phần trăm phí thuế (so với giá bán):</label>
                        <input type="number" id="taxFeePercent" name="taxFeePercent" disabled>%<br><br>

                        <label for="packingCost">Chi phí đóng gói:</label>
                        <input type="text" id="packingCost" name="packingCost"
                               title="Thay đổi để cập nhật giá bán" 
                               oninput="CaculateSalePrice()">VND<br><br>

                        <label for="absoluteMinProfit" title="Là lợi nhuận tuyệt đối tối thiểu trên một sản phẩm mà
                               có thể tăng thêm mức chiết khấu (so với mức chiết khấu mặt bằng chung) bán ra. Ví dụ: SP giá bìa 500.000
                               Mong muốn lợi nhuận tuyệt đối tối thiểu là 30.000 thì ta có thể chiết khấu sâu hơn so với SP giá bìa
                               300.000
                               ">Lợi nhuận tuyệt đối:</label>
                        <input type="text" id="absoluteMinProfit" name="absoluteMinProfit"
                               title="Thay đổi để cập nhật giá bán" oninput="CaculateSalePrice()">VND<br><br>

                        <label for="profitPercent">Lợi nhuận so với giá vốn:</label>
                        <input type="number" id="profitPercent" name="profitPercent" step="0.1" min="0" max="100"
                               title="Thay đổi để cập nhật giá bán.Phần trăm lợi nhuận mong muốn(so với giá nhập) để cập nhật giá bán"
                                oninput="CaculateSalePrice()">%<br><br>

                        <div class="display-flex-align-items-center">
                            <label for="salePrice" title="Giá bán">Giá bán:</label>
                            <input type="text" id="salePrice" name="salePrice" disabled><div>VND</div><br><br>

                            <label for="saleDiscount" style="margin-left: 20px;" title="Tính được giá bán từ chiết khấu bán và giá bìa">Chiết khấu bán:</label>
                            <input type="number" id="saleDiscount" name="saleDiscount" disabled><div>%</div><br><br>
                        </div>

                        <button type="button" id="btnCreateOneDeal" onclick="CreateOneDeal(this)"
                                title="Kiểm tra chương trình giảm giá hiện tại đang chạy thì phải tắt thủ công trước">Tạo chương trình giảm giá</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script src="~/Scripts/web.play.with.me.update.width.js"></script>
    <script src="~/Scripts/web.play.with.me.common.js"></script>
    <script src="~/Scripts/web.play.with.me.item.model.js"></script>
    <script src="~/Scripts/web.play.with.me.action.common.js"></script>
    <script>
        let modal = document.getElementById("myModal");
        modal.style.display = "none";

        // Get the <span> element that closes the modal
        let span = document.getElementsByClassName("close")[0];

        let taxAndFeeTiki = null;
        let listPublisher = [];
        let listItemNoDealDiscountRunning = [];
        let listDealOfSku = [];

        async function InitializeSomethingAtBegin() {
            // When the user clicks on <span> (x), close the modal
            span.onclick = function () {
                CloseModalTikiDiscountPage(modal);
            }

            // Định dạng tiền
            AddEventFormatInputVND("packingCost");
            AddEventFormatInputVND("absoluteMinProfit");
            AddEventFormatInputVND("bookCoverPrice");
            AddEventFormatInputVND("salePrice");

            taxAndFeeTiki = await GetTaxAndFeeCore(eTiki);

            listPublisher = await GetListPubliserCore();
        }

        InitializeSomethingAtBegin();

        function CloseModalTikiDiscountPage() {
            modal.style.display = "none";
        }

        async function ShowModalTikiDiscountPage(itemId, sku) {
            if (listPublisher.length == 0) {
                CreateMustClickOkModal("Không lấy được thông tin chiết khấu từ nhà phát hành. Thử lại sau", null);
                return;
            }

            if (taxAndFeeTiki == null) {
                CreateMustClickOkModal("Không lấy được thông tin thuế, phí. Thử lại sau", null);
                return;
            }

            modal.style.display = "block";
            // Từ tikiId lấy được thông tin
            ShowCircleLoader();
            let responseDB = await GetItemFromId(eTiki, itemId);
            RemoveCircleLoader();
            let commonItem = null;
            if (responseDB.responseText != "null") {
                commonItem = JSON.parse(responseDB.responseText);
            }
            else {
                return;
            }

            // Nếu sản phẩm chưa mapping, hiện thông báo
            if (commonItem.models[0].mapping.length == 0) {
                CreateMustClickOkModal("Chưa mapping sản phẩm nên không thể tính giá bìa, chiết khấu,...", null);
                return;
            }
            // Tính giá bìa từ mapping
            let bookCoverPriceSum = 0;
            let mapping = commonItem.models[0].mapping;

            for (let i = 0; i < mapping.length; i++) {
                bookCoverPriceSum = bookCoverPriceSum + mapping[i].product.bookCoverPrice * mapping[i].quantity;
            }
            // Tính chiết khấu khi nhập hàng.
            // Tính theo chiết khấu sản phẩm nếu có (lớn hơn chiết khấu của nhà phát hành), ngược lại tính
            // theo chiết khấu chung của nhà phát hành.
            // Vì có thể có nhiều giá trị chiết khấu ta tính chiết khấu trung bình theo công thức:
            // lấy tổng giá thực nhập chia cho tổng giá bìa
            let bookPriceSum = 0;
            let importDiscount = 0;
            if (DEBUG) {
                console.log("listPublisher: " + JSON.stringify(listPublisher));
                console.log("listPublisher[5]: " + JSON.stringify(listPublisher[5]));
            }
            for (let i = 0; i < mapping.length; i++) {
                importDiscount = 0;
                for (let j = 0; j < listPublisher.length; j++) {
                    // Lấy discount của nhà phát hành
                    if (mapping[i].product.publisherId == listPublisher[j].id) {
                        importDiscount = listPublisher[j].discount;
                        break;
                    }
                }
                if (DEBUG) {
                    console.log("importDiscount: " + importDiscount);
                    console.log("mapping["+ i + "].product.discount: " + mapping[i].product.discount);
                }

                // So sánh với discount của sản phẩm, chọn giá trị lớn nhất
                if (mapping[i].product.discount > importDiscount) {
                    importDiscount = mapping[i].product.discount;
                }
                bookPriceSum = bookPriceSum + mapping[i].product.bookCoverPrice * mapping[i].quantity * importDiscount / 100;
            }
            if (DEBUG) {
                console.log("bookCoverPriceSum: " + bookCoverPriceSum);
                console.log("bookPriceSum: " + bookPriceSum);
            }

            // Lấy chiết khấu với 1 chữ số sau dấu phảy
            importDiscount = Math.floor((10 * bookPriceSum / bookCoverPriceSum) / 10 * 100);
            if (DEBUG) {
                console.log("importDiscount after: " + importDiscount);
            }

            SetFormattedMoneyInput("bookCoverPrice", bookCoverPriceSum);
            document.getElementById("importDiscount").value = importDiscount;
            document.getElementById("taxFeePercent").value = taxAndFeeTiki.tax + taxAndFeeTiki.fee;
            document.getElementById("taxFeePercent").title = "Thuế VAT, thu nhập: " + taxAndFeeTiki.tax + "%, phí sàn: " + taxAndFeeTiki.fee + "%";
            SetFormattedMoneyInput("packingCost", taxAndFeeTiki.packingCost);
            SetFormattedMoneyInput("absoluteMinProfit", taxAndFeeTiki.minProfit);

            document.getElementById("profitPercent").value = taxAndFeeTiki.expectedPercentProfit;

            document.getElementById("profitPercent").title = "";
            document.getElementById("profitPercent").disabled = false;

            document.getElementById("packingCost").disabled = false;
            document.getElementById("packingCost").title = "";

            document.getElementById("absoluteMinProfit").disabled = false;
            document.getElementById("absoluteMinProfit").title = "";
            CaculateSalePrice();

            document.getElementById("btnCreateOneDeal").sku = sku;

            // Hiện nút tạo chương trình giảm giá tránh click lại
            document.getElementById("btnCreateOneDeal").disabled = false;
        }

        // INACTIVE = 0 | ACTIVE = 1 | RUNNING = 2 | EXPIRED = 3 | HOT_SALE = 4 | CLOSED = 5 | PAUSED = 6
        function GetStatusOfDeal(intStatus) {
            const statusMap = {
                0: "INACTIVE",
                1: "ACTIVE",
                2: "RUNNING",
                3: "EXPIRED",
                4: "HOT_SALE",
                5: "CLOSED",
                6: "PAUSED"
            };

            return statusMap[intStatus] || "UNKNOWN"; // Trả về "UNKNOWN" nếu không tìm thấy
        }

        function DisplayListDeal(inListDeal) {
            document.getElementById("btnCreateDealForAllInTheTable").style.display = "none";
            document.getElementById("id-container-get-item-no-discount-running").style.display = "none";
            DeleteRowsExcludeHead(document.getElementById("myTableGetItemsNoDealDiscountRunning"));

            document.getElementById("id-container-get-deal-discount-of-sku").style.display = "block";
            // Hiển thị danh sách đơn hàng
            let table = document.getElementById("myTableGetDealDiscountOfSku");
            DeleteRowsExcludeHead(table);

            let lengthTemp = inListDeal.length;

            let deal;
            for (let i = 0; i < lengthTemp; i++) {
                deal = inListDeal[i];
                let row = table.insertRow(-1);
                // Insert new cells (<td> elements)
                let cell0 = row.insertCell(0);
                let cell1 = row.insertCell(1);
                let cell2 = row.insertCell(2);
                let cell3 = row.insertCell(3);
                let cell4 = row.insertCell(4);
                let cell5 = row.insertCell(5);
                let cell6 = row.insertCell(6);
                let cell7 = row.insertCell(7);
                let cell8 = row.insertCell(8);
                let cell9 = row.insertCell(9);

                // id
                cell0.innerHTML = deal.id;
                cell0.style.display = "none";

                // Bắt Đầu
                cell1.innerHTML = deal.special_from_date;

                // Kết thúc
                cell2.innerHTML = deal.special_to_date;

                // Giá Bìa
                cell3.innerHTML = deal.price.toLocaleString('en-US');

                // Chiết Khấu
                cell4.innerHTML = deal.discount_percent;

                // Giá bán
                cell5.innerHTML = deal.special_price.toLocaleString('en-US');

                // Giới Hạn
                cell6.innerHTML = deal.qty_max;

                // Giới Hạn 1 đơn
                cell7.innerHTML = deal.qty_limit;

                // Trạng Thái
                cell8.innerHTML = GetStatusOfDeal(deal.is_active);

                // Tắt chương trình giảm giá nếu đang ở trạng thái active hoặc running
                if (deal.is_active == 1 || deal.is_active == 2) {
                    // Tạo button
                    let button = document.createElement('button');
                    button.className = "xvxvxkshubnx";
                    button.dealId = deal.id;
                    button.textContent = "Tắt";
                    button.cell8 = cell8;
                    button.title = "Tắt chương trình giảm giá";

                    // Thêm sự kiện click
                    button.addEventListener('click', async function () {
                        let text = "Bạn chắc chắn muốn TẮT CHƯƠNG TRÌNH GIẢM GIÁ này?";
                        if (confirm(text) == false)
                            return;
                        let isOk = await OffDealFromId(this.dealId);
                        if (isOk) {
                            this.cell8.innerHTML = GetStatusOfDeal(5);
                            this.remove();
                        }
                    });

                    cell9.append(button);
                }
            }
        }

        async function OffDealFromId(dealId) {
            const searchParams = new URLSearchParams();
            searchParams.append("dealId", dealId);

            let url = "/TikiDealDiscount/OffDealFromId";

            // Cập nhật vào db
            ShowCircleLoader();
            let responseDB = await RequestHttpPostPromise(searchParams, url);
            RemoveCircleLoader();
            let isOk = CheckStatusResponseAndShowPrompt(responseDB.responseText, "Cập nhật thành công.", "Cập nhật thất bại.");
            return isOk;
        }

        async function GetDealDiscountOfSku() {
            let sku = document.getElementById("sku-tiki-item").value;
            if (isEmptyOrSpaces(sku)) {
                await CreateMustClickOkModal("Chưa nhập sku.", null);
                document.getElementById("sku-tiki-item").focus();
                return;
            }

            const searchParams = new URLSearchParams();
            searchParams.append("sku", sku);

            let query = "/TikiDealDiscount/GetDealDiscountOfSku";

            ShowCircleLoader();
            let responseDB = await RequestHttpPostPromise(searchParams, query);
            RemoveCircleLoader();
            if (responseDB.responseText == "null") {
                await CreateMustClickOkModal("Không lấy được chương trình giảm giá. Thử lại sau.", null);
                listDealOfSku = [];
                return;
            }

            // Hiển thị
            listDealOfSku = JSON.parse(responseDB.responseText);
            DisplayListDeal(listDealOfSku);
        }

        async function ShowModalFromSku() {
            let sku = document.getElementById("sku-tiki-item").value;
            if (isEmptyOrSpaces(sku)) {
                await CreateMustClickOkModal("Chưa nhập sku.", null);
                document.getElementById("sku-tiki-item").focus();
                return;
            }

            if (listDealOfSku.length > 0) {
                ShowModalTikiDiscountPage(listDealOfSku[0].product_id, listDealOfSku[0].sku);
            }
            else {
                // Lấy itemid từ sku
                const searchParams = new URLSearchParams();
                searchParams.append("sku", sku);
                let query = "/TikiDealDiscount/GetTikiIdBySku";

                ShowCircleLoader();
                let responseDB = await RequestHttpPostPromise(searchParams, query);
                RemoveCircleLoader();

                let id = parseInt(responseDB.responseText);
                ShowModalTikiDiscountPage(id, sku);
            }
        }

        function DisplayItemsNoDealDiscountRunning(inListTikiItem) {
            document.getElementById("sku-tiki-item").value = "";
            document.getElementById("id-container-get-deal-discount-of-sku").style.display = "none";
            DeleteRowsExcludeHead(document.getElementById("myTableGetDealDiscountOfSku"));

            document.getElementById("id-container-get-item-no-discount-running").style.display = "block";
            document.getElementById("btnCreateDealForAllInTheTable").style.display = "block";
            let table = document.getElementById("myTableGetItemsNoDealDiscountRunning");
            DeleteRowsExcludeHead(table);

            let lengthTemp = inListTikiItem.length;

            let tikiItem;
            for (let i = 0; i < lengthTemp; i++) {
                tikiItem = inListTikiItem[i];
                let row = table.insertRow(-1);
                // Insert new cells (<td> elements)
                let cell0 = row.insertCell(0);
                let cell1 = row.insertCell(1);
                let cell2 = row.insertCell(2);
                let cell3 = row.insertCell(3);
                let cell4 = row.insertCell(4);

                // id
                cell0.innerHTML = tikiItem.id;
                cell0.style.display = "none";

                // STT
                cell1.innerHTML = i + 1;


                // Ảnh
                let imgDiv = document.createElement("img");
                imgDiv.height = thumbnailHeight;
                imgDiv.width = thumbnailWidth;
                imgDiv.style.cursor = "pointer";
                if (tikiItem.imageSrc) {
                    imgDiv.src = tikiItem.imageSrc;
                }
                else {
                    imgDiv.src = srcNoImageThumbnail;
                }
                imgDiv.tikiItemId = tikiItem.id;
                imgDiv.onclick = function () {
                    let url = "/ProductECommerce/Item?eType=TIKI&id=" + this.tikiItemId;
                        window.open(url);
                }
                cell2.append(imgDiv);

                // Tên
                cell3.innerHTML = tikiItem.name;
                if (tikiItem.models[0].mapping.length == 0) {
                    cell3.style.color = "red";
                    cell3.title = "SKU này chưa mapping.";
                }

                // Sku
                let p = document.createElement("p");
                p.innerHTML = tikiItem.sku;
                p.style.cursor = "pointer";
                p.onclick = function () {
                    ShowModalTikiDiscountPage(this.tikiItem.id, this.tikiItem.sku);
                }
                p.tikiItem = tikiItem;
                cell4.append(p);
            }
        }

        function DeleteItemFromNoDealDiscountRunning(sku)
        {
            // Xóa khỏi bảng đang hiển thị
            const table = document.getElementById("myTableGetItemsNoDealDiscountRunning");
            // Duyệt qua các hàng từ cuối về đầu để tránh làm hỏng chỉ số khi xóa
            for (let i = table.rows.length - 1; i >= 0; i--) {
                const lastCell = table.rows[i].cells[table.rows[i].cells.length - 1];
                if (lastCell && lastCell.textContent.trim() === sku) {
                    table.deleteRow(i);
                    break;
                }
            }
            // Xóa khỏi danh sách
            for (let i = 0; i < listItemNoDealDiscountRunning.length; i++) {
                if (listItemNoDealDiscountRunning[i].sku === sku) {
                    listItemNoDealDiscountRunning.splice(i, 1);
                    break;
                }
            }
        }

        async function GetItemsNoDealDiscountRunning() {
            const searchParams = new URLSearchParams();
            let query = "/TikiDealDiscount/GetItemsNoDealDiscountRunning";

            ShowCircleLoader();
            let responseDB = await RequestHttpPostPromise(searchParams, query);
            RemoveCircleLoader();
            if (responseDB.responseText == "null") {
                listItemNoDealDiscountRunning = [];
                await CreateMustClickOkModal("Không lấy được đơn hàng. Thử lại sau.", null);
                return;
            }

            // Hiển thị danh sách đơn hàng. Danh sách sẽ chỉ gồm 1 đơn hàng
            listItemNoDealDiscountRunning = JSON.parse(responseDB.responseText);
            DisplayItemsNoDealDiscountRunning(listItemNoDealDiscountRunning);
        }

        async function SaveDealDiscountOfAllSku() {

            let text = "Lưu dữ liệu mới, cập nhật chương trình giảm giá của tất cả sku đang bật bán vào db. Hàm mất thời gian, dữ liệu. CÂN NHẮC?";
            if (confirm(text) == false) {
                return;
            }

            const searchParams = new URLSearchParams();

            let query = "/TikiDealDiscount/SaveDealDiscountOfAllSku";

            ShowCircleLoader();
            let responseDB = await RequestHttpPostPromise(searchParams, query);
            RemoveCircleLoader();
            CheckStatusResponseAndShowPrompt(responseDB.responseText, "Thành công.", "Thất bại.");
        }

        async function UpdateDealStatusOfRunningDealOnDB() {
            const searchParams = new URLSearchParams();

            let query = "/TikiDealDiscount/UpdateDealStatusOfRunningDealOnDB";

            ShowCircleLoader();
            let responseDB = await RequestHttpPostPromise(searchParams, query);
            RemoveCircleLoader();
            CheckStatusResponseAndShowPrompt(responseDB.responseText, "Thành công.", "Thất bại.");
        }

        async function UpdatePriceToBookCoverPriceOfAll() {
            const searchParams = new URLSearchParams();

            let query = "/TikiDealDiscount/UpdatePriceToBookCoverPriceOfAll";

            ShowCircleLoader();
            let responseDB = await RequestHttpPostPromise(searchParams, query);
            RemoveCircleLoader();
            CheckStatusResponseAndShowPrompt(responseDB.responseText, "Thành công.", "Thất bại.");
        }

        // Xây dựng công thức tính giá bán
        // p: giá bìa, 
        // dI: chiết khấu nhập, VD: 0.4
        // dO: chiết khấu bán,
        // x: % lợi nhuận mong muốn so với giá thực tế nhập sách
        // t: phần trăm phí trả sản + thuế nộp nhà nước so với giá bán trên sàn
        // c: chi phí đóng gói cố đinh
        // m: lợi nhuận tuyệt đối. Nếu giá bìa lớn ta có thể chiết khấu sâu hơn khi bán để lợi nhuận tối thiểu bằng m
        // Giá bán  - giá nhập  - thuế phí   - phí đóng hàng = lợi nhuận còn lại
        // p(1 - dO) - p(1 -dI) - p(1 - dO)t - c             = p(1 - dI) x
        //
        // p(1 - dO)(1 - t) = p(1 -dI) + c + pdIx
        // =>p(1 - dO) = (p(1 -dI) + c + p(1 - dI)x) / (1 - t)
        // Làm tròn xuống thành số nguyên
        function CaculateSalePriceCore(p, dI, x, t, c, m) {
            let salePrice = 0;
            if (p === 0) {
                return salePrice;
            }
            if (p * (1 - dI) * x > m) {
                x = m / (p * (1 - dI));
            }

            salePrice = Math.floor((p * (1 - dI) + c + p * (1 - dI) * x) / (1 - t));

            // Làm tròn salePrice là bội của 100 VND
            if (salePrice % 100 != 0) {
                salePrice = salePrice - salePrice % 100;
            }

            return salePrice;
        }

        function CaculateSalePrice() {
            if (DEBUG) {
                console.log("document.getElementById(profitPercent).value: " + document.getElementById("profitPercent").value);
            }
            let profitPercent = document.getElementById("profitPercent").value;
            if (profitPercent === "" || isNaN(profitPercent)) {
                document.getElementById("salePrice").value = "";
                document.getElementById("saleDiscount").value = "";
                return;
            }

            const p = GetVNDValue("bookCoverPrice");
            const dI = (parseFloat(document.getElementById("importDiscount").value) || 40) / 100;
            const t = (parseFloat(document.getElementById("taxFeePercent").value) || 21.5) / 100;
            const c = GetVNDValue("packingCost");
            const m = GetVNDValue("absoluteMinProfit");
            const x = (parseFloat(document.getElementById("profitPercent").value)) / 100;

            //if (DEBUG) {
            //    console.log("p: " + p);
            //    console.log("dI: " + dI);
            //    console.log("t: " + t);
            //    console.log("c: " + c);
            //    console.log("m: " + m);
            //    console.log("x: " + x);
            //}
            let salePrice = CaculateSalePriceCore(p, dI, x, t, c, m);

            // Vì sản phẩm giá bìa thấp, để đạt % như mong muốn giá bán cần cao hơn cả giá bìa
            // Ta tính lại giá bán, bán dưới điểm hòa vốn
            let dO = tikiConstDiscount;
            if (salePrice >= p) {
                salePrice = p * (100 - dO) / 100;
                // Làm tròn salePrice là bội của 100 VND
                if (salePrice % 100 != 0) {
                    salePrice = salePrice - salePrice % 100;
                }
                let title = "Vì giá bìa rẻ, chấp nhận bán dưới giá vốn và chiết khấu một chút so với giá bìa. Disable ô nhập này";
                document.getElementById("profitPercent").value = 0;
                document.getElementById("profitPercent").title = title;
                document.getElementById("profitPercent").disabled = true;

                document.getElementById("packingCost").disabled = true;
                document.getElementById("packingCost").title = title;

                document.getElementById("absoluteMinProfit").disabled = true;
                document.getElementById("absoluteMinProfit").title = title;
            }
            else {
                // Tính chiết khấu bán so với giá bìa
                dO = 100 - salePrice / p * 100;
            }
            //if (DEBUG) {
            //    console.log("salePrice: " + salePrice);
            //    console.log("saleDiscount: " + Math.round(dO * 100 * 10) / 10);
            //}
            SetFormattedMoneyInput("salePrice", salePrice);
            document.getElementById("saleDiscount").value = Math.round(dO * 10) / 10;
        }

        async function CreateOneDeal(btn) {
            if (GetVNDValue("salePrice") == 0) {
                CreateMustClickOkModal("Không thể set giá bán bằng 0", null);
                return;
            }

            const searchParams = new URLSearchParams();
            searchParams.append("sku", btn.sku);
            searchParams.append("special_price", GetVNDValue("salePrice"));
            let query = "/TikiDealDiscount/CreateOneDeal";

            ShowCircleLoader();
            let responseDB = await RequestHttpPostPromise(searchParams, query);
            RemoveCircleLoader();
            let isOk = CheckStatusResponseAndShowPrompt(responseDB.responseText, "Thành công.", "Thất bại.");
            if (isOk) {
                // Xóa sku khỏi bảng sản phẩm chưa gắn với chương trình giảm giá đang chạy nào dù 10 phút
                // nữa chương trình vừa tạo mới chạy.
                DeleteItemFromNoDealDiscountRunning(btn.sku);
                // Ẩn nút tạo chương trình giảm giá tránh click lại
                document.getElementById("btnCreateOneDeal").disabled = true;
            }
        }

        async function CreateDealForAllInTheTable() {
            let text = "Bạn chắc chắn muốn TẠO CHƯƠNG TRÌNH GIẢM GIÁ CHO TẤT CẢ?";
            if (confirm(text) == false) {
                return;
            }

            let url = "/TikiDealDiscount/CreateDealForAllInTheTable";
            const searchParams = new URLSearchParams();
            searchParams.append("listItem", JSON.stringify(listItemNoDealDiscountRunning));

            ShowCircleLoader();
            let responseDB = await RequestHttpPostPromise(searchParams, url);
            RemoveCircleLoader();
            CheckStatusResponseAndShowPrompt(responseDB.responseText, "Thành công.", "Có lỗi xảy ra.");
        }
    </script>
</body>
</html>
