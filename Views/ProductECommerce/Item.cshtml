@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    @Html.Partial("~/Views/Shared/Head.cshtml")
    <link rel="stylesheet" href="~/Content/web.play.with.me.table.show.data.css">
    <link rel="stylesheet" href="~/Content/web.play.with.me.modal.common.css">
    <style>
        .pro-eecomerce-mapping-container {
            margin-left: 50px;
        }
        .item-image-ACvv {
            width: 150px;
            height: 150px;
            border-radius: 3px 4px;
        }
        .one-item-container {
            display: flex;
            padding: 10px;
            align-items: center;
        }
        .fcpaxm09zf {
            margin: 5px 5px 5px 20px;
        }
    </style>
</head>
<body>
    <div id="biggestContainer">
        <div class="config-max-width padding-container">
            <div class="one-item-container">
                <img class="item-image-ACvv">
                <div class="fcpaxm09zf">
                    <div class="item-status-azc"></div>
                    <div class="item-name-vsfc"></div>
                </div>
            </div>
            <div id="model-list">
            </div>
            @Html.Partial("~/Views/Shared/ItemModel/Mapping.cshtml")

            <button type="button" onclick="UpdateEEcommerceMapping()">Cập nhật</button>
        </div>
    </div>
    <script src="~/Scripts/web.play.with.me.update.width.js"></script>
    <script src="~/Scripts/web.play.with.me.common.js"></script>
    <script src="~/Scripts/web.play.with.me.item.model.js"></script>
    <script>
        GetListProductName();
        GetListCombo();
        InitializeModal();
        ViewItemFromId();
        let commonItem = null;
        let vbnItemId = 0;

        //async function GetVBNItemId(vbnModelId) {
        //    const searchParams = new URLSearchParams();
        //    searchParams.append("modelId", vbnModelId);
        //    let query = "/ItemModel/GetVBNItemIdFromModelId";

        //    let responseDB = await RequestHttpPostPromise(searchParams, query);

        //    if (responseDB.responseText != "null") {
        //        let result = JSON.parse(responseDB.responseText);
        //        if (result.State == 0) {
        //            return result.myAnything;
        //        }
        //    }
        //    return 0; // Không lấy được item id
        //}

        function GetEEcommerceTypeFromUrl() {
            let type = "SHOPEE";

            if (window.location.href.includes("SHOPEE")) {
                type = "SHOPEE";
            }
            else if (window.location.href.includes("TIKI")) {
                type = "TIKI";
            }
            else if (window.location.href.includes("LAZADA")) {
                type = "LAZADA";
            }
            return type;
        }

        async function GetItemFromId(eType, id) {
            const searchParams = new URLSearchParams();
            searchParams.append("eType", eType);
            searchParams.append("id", id);

            let query = "/ProductECommerce/GetItemFromId";

            return RequestHttpPostPromise(searchParams, query);
        }

        async function ViewItemFromId() {
            ShowCircleLoader();

            let responseDB = await GetItemFromId(GetEEcommerceTypeFromUrl(), GetValueFromUrlName("id"));
            if (responseDB.responseText != "null") {
                commonItem = JSON.parse(responseDB.responseText);
            }
            else {
                RemoveCircleLoader();
                return;
            }

            RemoveCircleLoader();
            // Hiển thị sản phẩm của sàn
            if (commonItem.imageSrc) {
                document.getElementsByClassName("item-image-ACvv")[0].src = commonItem.imageSrc;
            }
            else {
                document.getElementsByClassName("item-image-ACvv")[0].src = srcNoImageThumbnail;
            }
            document.getElementsByClassName("item-name-vsfc")[0].innerHTML = commonItem.name;
            let itemStatus;
            if (commonItem.bActive) {
                itemStatus = "Đang Bật Bán Trên Sàn";
            }
            else {
                itemStatus = "Đang Tắt Bán Trên Sàn";
            }
            document.getElementsByClassName("item-status-azc")[0].innerHTML = itemStatus;
            // Hiển thị danh sách mapping
            ShowModelEEcommerce(commonItem);
        }

        // Thêm nút sinh model trên web voibenho
        function AddBornModelForVoiBeNhoButton(itemObj, modelObj, container) {
            let btn = document.createElement("BUTTON");
            btn.title = "Sinh model sản phẩm trên web voibenho";
            let btnContent = document.createTextNode("Sinh model");
            btn.itemObj = itemObj;
            btn.modelObj = modelObj;

            btn.onclick = function () {
                if (this.modelObj.pWMMappingModelId != -1) {
                    if (confirm("Bạn muốn xóa model sản phẩm đã sinh và sinh mới") == false) {
                        return;
                    }
                }
                ShopeeBornModelForVoiBeNho(JSON.stringify(this.itemObj),
                    this.modelObj.modelId,
                    this.modelObj.pWMMappingModelId);
            }
            btn.appendChild(btnContent);
            //btn.className = "margin-vertical";
            //btn.style.cssFloat = "right";

            const div = document.createElement("div");
            //div.style.display = "flex";
            //div.style.flexDirection = "row-reverse";

            // Đã sinh ra model tương ứng trên web voibenho
            if (modelObj.pWMMappingModelId != -1) {
                const p = document.createElement("p");
                p.innerHTML = "Đã sinh trên voibenho";
                p.title = "Xem sản phẩm tương ứng trên voibenho";
                p.style.cursor = "pointer";
                p.onclick = async function () {
                    if (vbnItemId == 0) {
                        const searchParams = new URLSearchParams();
                        searchParams.append("modelId", modelObj.pWMMappingModelId);
                        let query = "/ItemModel/GetVBNItemIdFromModelId";

                        let responseDB = await RequestHttpPostPromise(searchParams, query);

                        if (responseDB.responseText != "null") {
                            let result = JSON.parse(responseDB.responseText);
                            if (DEBUG) {
                                console.log(JSON.stringify(result));
                            }
                            if (result.State == 0) {
                                vbnItemId = result.myAnything;
                            }
                            else {
                                CreateMustClickOkModal(result.Message, null);
                                return;
                            }
                        }
                    }
                    if (vbnItemId != 0) {
                        let url = "/ItemModel/UpdateDelete?id=" + vbnItemId.toString();
                        window.open(url);
                    }
                    else {
                        CreateMustClickOkModal("Không lấy được thông tin sản phẩm. Thử lại sau.", null);
                    }
                }
                div.appendChild(p);
            }
            div.appendChild(btn);
            container.appendChild(div);
        }

        function AddModelToScreenEEcommerce(itemObj, modelObj) {
            const modelContainer = document.createElement("div");
            modelContainer.style.marginLeft = "10px";
            modelContainer.style.backgroundColor = "#e6e6e6";
            modelContainer.style.padding = "10px 10px 10px 10px";
            modelContainer.style.borderRadius = "10px";
            modelContainer.className = "model-container";
            modelContainer.modelId = modelObj.modelId; // Tiki mặc định là -1 vì không có phân loại

            modelList.appendChild(modelContainer);

            // model không phải là item
            if (modelObj.modelId != -1) {
                const div = document.createElement("div");

                // Ảnh đại diện
                let imgDiv = document.createElement("img");
                imgDiv.height = thumbnailHeight;
                imgDiv.width = thumbnailWidth;
                if (modelObj.imageSrc) {
                    imgDiv.src = modelObj.imageSrc;
                }
                else {
                    imgDiv.src = srcNoImageThumbnail;
                }

                // Tên:
                let nameDiv = document.createElement("div");
                nameDiv.innerHTML = modelObj.name;
                nameDiv.style.marginLeft = "20px";

                div.appendChild(imgDiv);
                div.appendChild(nameDiv);
                div.style.display = "flex";
                div.style.alignItems = "center";
                modelContainer.appendChild(div);
            }
            // Thêm nút sinh model trên web voibenho
            AddBornModelForVoiBeNhoButton(itemObj, modelObj, modelContainer);

            // Thêm nút mapping
            AddMappingButtonForModel(modelContainer);

            AddDistanceRows(modelContainer);
            AddDistanceRows(modelList);

            return modelContainer;
        }

        function ShowModelEEcommerce(itemObj) {
            // Hiển thị các model
            let length = itemObj.models.length;
            countModel = 0;
            for (let i = 0; i < length; i++) {
                // Hiển thị mapping sản phẩm trong kho nếu có
                let modelObj = itemObj.models[i];

                let model = AddModelToScreenEEcommerce(itemObj, modelObj);

                // Hiển thị mapping
                let table = CreateModelTableMapping(model);

                let listObj = [];
                for (let j = 0; j < modelObj.mapping.length; j++) {
                    let src;
                    if (modelObj.mapping[j].product.imageSrc.length > 0) {
                        src = Get320VersionOfImageSrc(modelObj.mapping[j].product.imageSrc[0]);
                    }
                    else {
                        src = srcNoImageThumbnail;
                    }

                    let obj = new objRowTableMapping(
                        Number(modelObj.mapping[j].product.id),
                        src,
                        modelObj.mapping[j].product.name,
                        Number(modelObj.mapping[j].quantity)
                    );

                    listObj.push(obj);
                }

                for (let j = 0; j < listObj.length; j++) {
                    CheckObjExistAndInsert(table, listObj[j]);
                }
            }
        }

        async function UpdateEEcommerceMapping() {
            if (commonItem == null) {
                await CreateMustClickOkModal("Sản phẩm không chính xác.", null);
                return;
            }
            ShowCircleLoader();
            const searchParams = new URLSearchParams();
            searchParams.append("eType", GetEEcommerceTypeFromUrl());

            let url = "/ProductECommerce/UpdateMapping";
            // tham số string gửi về server có dạng:
            // itemId,modelId,productId,productQuantity,...,itemId,modelId,productId,productQuantity
            let itemid = GetValueFromUrlName("id");
            let str = "";

            let listModelOnly = GetListModelOnly();
            let length = listModelOnly.length;

            for (let i = 0; i < length; i++) {
                let model = listModelOnly[i];

                let listProIdMapping = GetListProIdMapping(model.getElementsByClassName(classOfModelTable)[0]);
                let listQuantityMapping = GetListQuantityMapping(model.getElementsByClassName(classOfModelTable)[0]);

                if (listProIdMapping.length == 0) {
                    if (!isEmptyOrSpaces(str)) {
                        str = str + ",";
                    }
                    str = str + itemid + "," + model.modelId + ",,"; // productId,productQuantity trống
                }
                else {
                    for (let j = 0; j < listProIdMapping.length; j++) {
                        if (!isEmptyOrSpaces(str)) {
                            str = str + ",";
                        }
                        str = str + itemid + "," + model.modelId + ","
                            + listProIdMapping[j] + "," + listQuantityMapping[j];
                    }
                }
            }
            searchParams.append("str", str);

            try {
                let responseDB = await RequestHttpPostPromise(searchParams, url);
                let result = JSON.parse(responseDB.responseText);
                if (result.State != 0) {
                    await CreateMustClickOkModal(result.Message, null);
                }
                else {
                    alert("Cập nhật thành công.");
                }
            }
            catch (err) {
                //alert("Cập nhật sản phẩm lỗi.");
                await CreateMustClickOkModal("Cập nhật sản phẩm lỗi.",null);
                RemoveCircleLoader();
                return;
            }

            // Refresh page
            RemoveCircleLoader();
            window.scrollTo(0, 0);
        }

        async function ShopeeBornModelForVoiBeNho(strCommonItem, shopeeModelId, pWMMappingModelId)
        {
            ShowCircleLoader();
            const searchParams = new URLSearchParams();
            searchParams.append("strCommonItem", strCommonItem);
            searchParams.append("shopeeModelId", shopeeModelId);
            searchParams.append("pWMMappingModelId", pWMMappingModelId);
            let url = "/ProductECommerce/ShopeeBornModelForVoiBeNho";

            try {
                let responseDB = await RequestHttpPostPromise(searchParams, url);
                let result = JSON.parse(responseDB.responseText);
                if (result.State != 0) {
                    await CreateMustClickOkModal(result.Message, null);
                }
                else {
                    alert("Sinh model sản phẩm thành công.");
                }
            }
            catch (err) {

                await CreateMustClickOkModal("Sinh model sản phẩm lỗi.", null);
                RemoveCircleLoader();
                return;
            }

            RemoveCircleLoader();
        }
    </script>
</body>
</html>

