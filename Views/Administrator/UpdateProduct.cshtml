@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <title>Play with me</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=0">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
    <link rel="stylesheet" href="~/Content/web.play.with.me.common.css">
    <script src="~/Scripts/web.play.with.me.common.js"></script>
</head>
<body>
    <div id="biggestContainer">
        @Html.Partial("~/Views/Shared/biggestContainer_Top.cshtml")
        <div class="config-max-width padding-container">
            <form class="config-max-width">
                <label for="barcode">Mã vạch(không chứa ký tự đặc biệt -,/,..):</label><br>
                <input class="config-max-width margin-vertical" list="barcodes" id="barcode" onchange="ChangeBarcode()"><br>
                <datalist id="barcodes">
                    @foreach (var barcode in ViewData["lsBarcode"] as List<string>)
                    {
                        <option value="@barcode" />
                    }
                </datalist>
                <div class="add-more-left-padding">
                    <label for="fixbarcode">Sửa mã vạch:</label><br>
                    <input class="config-max-width margin-vertical" id="fixbarcode"><br>
                    <button type="button" onclick="UpdateProductBarcode()">Cập nhật mã vạch mới</button>
                    <button type="button" onclick="AddMoreProductBarcode()">Thêm mã vạch</button>
                </div>

                <label for="product-name">Tên:</label><br>
                <input class="config-max-width margin-vertical" list="lsProductName" id="product-name" onchange="ChangeProductName()"><br>
                <datalist id="lsProductName">
                    @foreach (var pro in ViewData["lsProductName"] as List<string>)
                    {
                        <option value="@pro" />
                    }
                </datalist>
                <div class="add-more-left-padding">
                    <label for="fix-product-name">Cập nhật tên mới:</label><br>
                    <input class="config-max-width margin-vertical" id="fix-product-name"><br>
                    <button type="button" onclick="UpdateProductName()">Cập nhật tên mới</button>
                </div>

                <label for="combo-name">Tên combo:</label><br>
                <input class="config-max-width margin-vertical" list="comboNames" id="combo-name"><br>
                <datalist id="comboNames">
                    @foreach (var comboName in ViewData["lsComboName"] as List<string>)
                    {
                        <option value="@comboName" />
                    }
                </datalist>

                <label for="category">Thể loại:</label><br>
                <input class="config-max-width margin-vertical" list="categorys" id="category"><br>
                <datalist id="categorys">
                    @foreach (var category in ViewData["lsCategory"] as List<string>)
                    {
                        <option value="@category" />
                    }
                </datalist>

                <label for="book-cover-price">Giá bìa:</label><br>
                <input class="config-max-width margin-vertical" type="number" id="book-cover-price" value=""><br>

                <label for="author">Tác giả:</label><br>
                <input class="config-max-width margin-vertical" list="authors" id="author"><br>
                <datalist id="authors">
                    @foreach (var author in ViewData["lsAuthor"] as List<string>)
                    {
                        <option value="@author" />
                    }
                </datalist>

                <label for="translator">Người dịch:</label><br>
                <input class="config-max-width margin-vertical" list="translators" id="translator"><br>
                <datalist id="translators">
                    @foreach (var translator in ViewData["lsTranslator"] as List<string>)
                    {
                        <option value="@translator" />
                    }
                </datalist>

                <label for="publisher-id">Nhà phát hành:</label><br>
                <select class="config-max-width margin-vertical" id="publisher-id">
                    @foreach (var pub in ViewData["lsPublisher"] as IList<MVCPlayWithMe.Models.Publisher>)
                    {
                        <option value=@pub.id>@pub.publisherName</option>
                    }
                </select>

                <button type="submit" formaction="/Administrator/CreatePublisher" formtarget="_self">Thêm nhà phát hành</button>
                <br />

                <label for="publishing-company">Nhà xuất bản:</label><br>
                <input class="config-max-width margin-vertical" list="publishingCompanys" id="publishing-company"><br>
                <datalist id="publishingCompanys">
                    @foreach (var publishingCompany in ViewData["lsPublishingCompany"] as List<string>)
                    {
                        <option value="@publishingCompany" />
                    }
                </datalist>

                <label for="publishing-time">Năm xuất bản:</label><br>
                <input class="config-max-width margin-vertical" type="date" id="publishing-time" value=""><br>

                <label for="product-long">Dài(cm):</label><br>
                <input class="config-max-width margin-vertical" type="number" id="product-long" value=""><br>

                <label for="product-wide">Rộng(cm):</label><br>
                <input class="config-max-width margin-vertical" type="number" id="product-wide" value=""><br>

                <label for="product-high">Cao(cm):</label><br>
                <input class="config-max-width margin-vertical" type="number" id="product-high" value=""><br>

                <label for="product-weight">Nặng(g):</label><br>
                <input class="config-max-width margin-vertical" type="number" id="product-weight" value=""><br>

                <label for="position-in-warehouse">Vị trí lưu kho:</label><br>
                <input class="config-max-width margin-vertical" type="text" id="position-in-warehouse" value=""><br>

                <label for="detail">Thông tin chi tiết thêm:</label><br>
                <textarea id="detail" rows="10" style="width:100%" value=""></textarea><br>
                <div id="oldImageVideo">

                </div>

                <div>
                    <input class="margin-vertical"
                           type="file"
                           id="videofileElem"
                           accept="video/*"
                           style="display:none" />
                    <a href="#" id="videofileSelect">Chọn video</a>
                    <div id="videofileList">
                        <p>Chưa video nào được chọn!</p>
                    </div>
                    <a href="#" id="videofileUnSelect">Bỏ chọn video</a>
                </div>
                <br />
                <div>
                    <input class="margin-vertical"
                           type="file"
                           id="fileElem"
                           multiple
                           accept="image/*"
                           style="display:none" />
                    <a href="#" id="fileSelect">Chọn ảnh</a>
                    <div id="fileList">
                        <p>Chưa ảnh nào được chọn!</p>
                    </div>
                    <a href="#" id="fileUnSelect">Bỏ chọn ảnh</a>
                </div>
            </form>

            <div class="config-max-width">
                <button type="button" onclick="UpdateInfoPro()">Cập nhật</button>
            </div>
            <p id="result-insert"></p>
        </div>
    </div>
    <script>
        let productId = -1;
        const oldImageVideo = document.getElementById("oldImageVideo");
        if (DEBUG) {
            console.log("initianize productId: " + productId);
        }

        function RefreshInput() {
            productId = -1;
            document.getElementById("fixbarcode").value = "";
            document.getElementById("fix-product-name").value = "";

            document.getElementById("barcode").value = "";
            document.getElementById("product-name").value = "";
            document.getElementById("combo-name").value = "";
            document.getElementById("category").value = "";
            document.getElementById("book-cover-price").value = "";
            document.getElementById("author").value = "";
            document.getElementById("translator").value = "";
            document.getElementById("publisher-id").value = "";
            document.getElementById("publishing-company").value = "";
            document.getElementById("publishing-time").value = "";
            document.getElementById("product-long").value = "";
            document.getElementById("product-wide").value = "";
            document.getElementById("product-high").value = "";
            document.getElementById("product-weight").value = "";
            document.getElementById("position-in-warehouse").value = "";
            document.getElementById("detail").value = "";

            let obj = null;
            DisplayImageVideo(obj);
        }

        function DisplayImageVideo(obj) {
            // Chưa sản phẩm nào được chọn
            if (obj === null) {
                oldImageVideo.innerHTML = "";
                return;
            }
            if ((obj.productName == "" && obj.barcode == "")) {
                oldImageVideo.innerHTML = "";
                return;
            }
            // Hiển thị video
            if (obj.videoSrc == "" && obj.imageSrc.length == 0) {
                oldImageVideo.innerHTML = "<p>Sản phẩm chưa có ảnh/ video!</p>";
                return;
            }

            oldImageVideo.innerHTML = "";
            let list = document.createElement("ul");
            oldImageVideo.appendChild(list)

            // Hiển thị video đã lưu
            if (obj.videoSrc != "") {
                const li = document.createElement("li");
                list.appendChild(li);

                const video = document.createElement("video");
                video.src = obj.videoSrc;
                video.controls = true;
                video.height = 120;

                li.appendChild(video);
            }

            // Hiển thị image đã lưu
            for (let i = 0; i < obj.imageSrc.length; i++) {
                const li = document.createElement("li");
                list.appendChild(li);

                const img = document.createElement("img");
                img.src = obj.imageSrc[i];
                img.height = 60;
                li.appendChild(img);
            }

            // Xóa video đã chọn
            videofileList.innerHTML = "<p>Chưa video nào được chọn!</p>";
            document.getElementById("videofileElem").value = "";
            // Xóa ảnh đã chọn
            fileList.innerHTML = "<p>Chưa ảnh nào được chọn!</p>";
            document.getElementById("fileElem").value = "";
        }

        function ChangeBarcode() {
            let barcode = document.getElementById("barcode").value;
            if (DEBUG) {
                console.log("barcode: " + barcode);
            }

            if (isEmptyOrSpaces(barcode) || (!CheckExistInDatalist(barcode, "barcodes") && !CheckExistInBarcodeDatalist(barcode, "barcodes"))) {
                document.getElementById("result-insert").innerHTML = "Mã vạch không chính xác.";
                RefreshInput();
                document.getElementById("barcode").focus();
                return;
            }

            const xhttp = new XMLHttpRequest();
            xhttp.onload = function () {
                if (this.readyState == 4 && this.status == 200) {
                    let responseText = this.responseText;
                    if (isEmptyOrSpaces(responseText)) {
                        document.getElementById("result-insert").innerHTML = "Mã vạch không chính xác.";
                        return;
                    }
                    const obj = JSON.parse(responseText);
                    if (DEBUG) {
                        console.log(obj);
                    }
                    productId = obj.id;
                    if (DEBUG) {
                        console.log("productId: " + productId);
                    }
                    document.getElementById("product-name").value = obj.productName;
                    document.getElementById("combo-name").value = obj.comboName;
                    document.getElementById("category").value = obj.category;
                    document.getElementById("book-cover-price").value = obj.bookCoverPrice;
                    document.getElementById("author").value = obj.author;
                    document.getElementById("translator").value = obj.translator;
                    document.getElementById("publisher-id").value = obj.publisherId;
                    document.getElementById("publishing-company").value = obj.publishingCompany;
                    document.getElementById("publishing-time").value = obj.publishingTimeyyyyMMdd;
                    document.getElementById("product-long").value = obj.productLong;
                    document.getElementById("product-wide").value = obj.productWide;
                    document.getElementById("product-high").value = obj.productHigh;
                    document.getElementById("product-weight").value = obj.productWeight;
                    document.getElementById("position-in-warehouse").value = obj.positionInWarehouse;
                    document.getElementById("detail").value = obj.detail;
                    DisplayImageVideo(obj);

                    document.getElementById("result-insert").innerHTML = "Lấy thông tin sản phẩm khi thay đổi mã vạch thành công.";
                }
            }

            const searchParams = new URLSearchParams();
            searchParams.append("barcode", barcode);
            let query = "/Administrator/UpdateProduct_Get_ChangeBarcode?" + searchParams.toString();
            if (DEBUG) {
                console.log(query);
            }
            xhttp.open("GET", query);
            xhttp.send();
        }

        function ChangeProductName() {
            let productName = document.getElementById("product-name").value;
            if (DEBUG) {
                console.log("productName: " + productName);
            }

            if (isEmptyOrSpaces(productName) || !CheckExistInDatalist(productName, "lsProductName")) {
                document.getElementById("result-insert").innerHTML = "Tên sản phẩm không chính xác.";
                RefreshInput();
                document.getElementById("product-name").focus();
                return;
            }

            const xhttp = new XMLHttpRequest();
            xhttp.onload = function () {
                if (this.readyState == 4 && this.status == 200) {
                    let responseText = this.responseText;
                    if (isEmptyOrSpaces(responseText)) {
                        document.getElementById("result-insert").innerHTML = "Tên sản phẩm không chính xác.";
                        return;
                    }
                    const obj = JSON.parse(responseText);
                    if (DEBUG) {
                        console.log(obj);
                    }
                    productId = obj.id;
                    if (DEBUG) {
                        console.log("productId: " + productId);
                    }
                    document.getElementById("barcode").value = obj.barcode;
                    document.getElementById("combo-name").value = obj.comboName;
                    document.getElementById("category").value = obj.category;
                    document.getElementById("book-cover-price").value = obj.bookCoverPrice;
                    document.getElementById("author").value = obj.author;
                    document.getElementById("translator").value = obj.translator;
                    document.getElementById("publisher-id").value = obj.publisherId;
                    document.getElementById("publishing-company").value = obj.publishingCompany;
                    document.getElementById("publishing-time").value = obj.publishingTimeyyyyMMdd;
                    document.getElementById("product-long").value = obj.productLong;
                    document.getElementById("product-wide").value = obj.productWide;
                    document.getElementById("product-high").value = obj.productHigh;
                    document.getElementById("product-weight").value = obj.productWeight;
                    document.getElementById("position-in-warehouse").value = obj.positionInWarehouse;
                    document.getElementById("detail").value = obj.detail;
                    DisplayImageVideo(obj);

                    document.getElementById("result-insert").innerHTML = "Lấy thông tin sản phẩm khi thay đổi tên thành công.";
                }
            }

            const searchParams = new URLSearchParams();
            searchParams.append("productName", productName);
            let query = "/Administrator/UpdateProduct_Get_ChangeproductName?" + searchParams.toString();
            if (DEBUG) {
                console.log(query);
            }
            xhttp.open("GET", query);
            xhttp.send();
        }

        function UpdateInfoPro() {
            AddNewPro(productId);
        }

        function UpdateProductBarcode() {
            if (productId == -1) {
                document.getElementById("result-insert").innerHTML = "Chưa chọn sản phẩm.";
                return;
            }

            let fixbarcode = document.getElementById("fixbarcode").value;
            if (DEBUG) {
                console.log("fixbarcode: " + fixbarcode);
            }
            if (isEmptyOrSpaces(fixbarcode)) {
                document.getElementById("result-insert").innerHTML = "Mã vạch mới không chính xác.";
                document.getElementById("fixbarcode").focus();
                return;
            }

            if (CheckExistInBarcodeDatalist(fixbarcode, "barcodes")) {
                document.getElementById("result-insert").innerHTML = "Mã vạch mới đã tồn tại.";
                document.getElementById("fixbarcode").focus();
                return;
            }

            const xhttp = new XMLHttpRequest();
            xhttp.onload = function () {
                if (this.readyState == 4 && this.status == 200) {
                    let responseText = this.responseText;
                    const obj = JSON.parse(responseText);
                    if (DEBUG) {
                        console.log(obj);
                    }
                    if (obj.State != 0) {
                        document.getElementById("result-insert").innerHTML = obj.Message;
                        return;
                    }

                    document.getElementById("result-insert").innerHTML = "Update mã vạch mới thành công.";
                }
            }

            const searchParams = new URLSearchParams();
            searchParams.append("id", productId);
            searchParams.append("newBarcode", fixbarcode);
            let query = "/Administrator/UpdateProduct_UpdateBarcode?" + searchParams.toString();
            if (DEBUG) {
                console.log(query);
            }
            xhttp.open("GET", query);
            xhttp.send();
        }

        function AddMoreProductBarcode() {
            if (productId == -1) {
                document.getElementById("result-insert").innerHTML = "Chưa chọn sản phẩm.";
                return;
            }

            let fixbarcode = document.getElementById("fixbarcode").value;
            if (DEBUG) {
                console.log("fixbarcode: " + fixbarcode);
            }
            if (isEmptyOrSpaces(fixbarcode)) {
                document.getElementById("result-insert").innerHTML = "Mã vạch thêm mới không chính xác.";
                document.getElementById("fixbarcode").focus();
                return;
            }

            if (CheckExistInBarcodeDatalist(fixbarcode, "barcodes")) {
                document.getElementById("result-insert").innerHTML = "Mã vạch thêm mới đã tồn tại.";
                document.getElementById("fixbarcode").focus();
                return;
            }

            const xhttp = new XMLHttpRequest();
            xhttp.onload = function () {
                if (this.readyState == 4 && this.status == 200) {
                    let responseText = this.responseText;
                    const obj = JSON.parse(responseText);
                    if (DEBUG) {
                        console.log(obj);
                    }
                    if (obj.State != 0) {
                        document.getElementById("result-insert").innerHTML = obj.Message;
                        return;
                    }

                    document.getElementById("result-insert").innerHTML = "Thêm mã vạch thành công.";
                }
            }

            const searchParams = new URLSearchParams();
            searchParams.append("id", productId);
            searchParams.append("newBarcode", fixbarcode);
            let query = "/Administrator/UpdateProduct_AddMoreProductBarcode?" + searchParams.toString();
            if (DEBUG) {
                console.log(query);
            }
            xhttp.open("GET", query);
            xhttp.send();
        }

        function UpdateProductName() {
            if (productId == -1) {
                document.getElementById("result-insert").innerHTML = "Chưa chọn sản phẩm.";
                return;
            }

            let newProductName = document.getElementById("fix-product-name").value;
            if (DEBUG) {
                console.log("newProductName: " + newProductName);
            }
            if (isEmptyOrSpaces(newProductName)) {
                document.getElementById("result-insert").innerHTML = "Tên mới không chính xác.";
                document.getElementById("fix-product-name").focus();
                return;
            }

            if (CheckExistInDatalist(newProductName, "lsProductName")) {
                document.getElementById("result-insert").innerHTML = "Tên mới đã tồn tại.";
                document.getElementById("fix-product-name").focus();
                return;
            }

            const xhttp = new XMLHttpRequest();
            xhttp.onload = function () {
                if (this.readyState == 4 && this.status == 200) {
                    let responseText = this.responseText;
                    const obj = JSON.parse(responseText);
                    if (DEBUG) {
                        console.log(obj);
                    }
                    if (obj.State != 0) {
                        document.getElementById("result-insert").innerHTML = obj.Message;
                        return;
                    }

                    document.getElementById("result-insert").innerHTML = "Cập nhật tên thành công.";
                }
            }

            const searchParams = new URLSearchParams();
            searchParams.append("id", productId);
            searchParams.append("newProductName", newProductName);
            let query = "/Administrator/UpdateProduct_UpdateProductName?" + searchParams.toString();
            if (DEBUG) {
                console.log(query);
            }
            xhttp.open("GET", query);
            xhttp.send();
        }
    </script>
    <script src="~/Scripts/web.play.with.me.update.width.js"></script>
    <script src="~/Scripts/web.play.with.me.upload.image.js"></script>
</body>
</html>

