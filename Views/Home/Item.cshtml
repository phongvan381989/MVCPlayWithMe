@*@model IEnumerable<MVCPlayWithMe.Models.Item>*@
@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <title>Play with me</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=0">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
    <link rel="stylesheet" href="~/Content/web.play.with.me.common.css">
    <link rel="stylesheet" href="~/Content/web.play.with.me.modal.common.css">
    <style>
        img, video {
            max-width: 100%;
            max-height: 100%;
            /*display: block;
            margin: auto;*/
        }

        #item-media-wrapper, #item-something-wrapper {
            display: flex;
            flex-direction: column;
            flex-wrap: wrap;
            width: 100%;
        }

        #item-medium-media {
            /*display: flex;*/
            /*position:relative;*/
            justify-content: center;
            align-items: center;
            display: block;
            /*width: 100%;*/
            margin-left: auto;
            margin-right: auto;
            margin-top: auto;
            margin-bottom: auto;
            padding: 5px;
            /*height: 800px;*/
            /*border: 1px solid rgb(255, 0, 0);*/
        }
        /*#item-small-media {
            display: flex;
            width: 100%;
            height: 120px;
        }*/

        #item-small-media-container {
            display: flex;
            width: 100%;
            padding: 5px;
            height: 120px;
            /*border: 1px solid rgb(255, 0, 0);*/
        }

        #item-variation-container, #item-order {
            display: flex;
            width: 100%;
            padding: 5px;
            flex-wrap: wrap;
            /*border: 1px solid rgb(255, 0, 0);*/
        }
        /*#item-something-wrapper{
            height: 1000px;
        }*/
        .small-media {
            display: flex;
            margin: 4px 5px 4px 5px;
            border: 1px solid rgb(228, 228, 222);
            width: 100px;
            height: 100px;
            /**/
            /*justify-content: center;*/
            /*align-items: center;*/
            /*padding: 1px;*/
        }

            .small-media:hover {
                /*border: 1px solid rgb(255, 0, 0);*/
                cursor: pointer;
            }

        .right-left-arrow:hover {
            cursor: pointer;
        }

        h1 {
            display: block;
            font-size: 1em;
            margin-top: 0.2em;
            margin-bottom: 0.2em;
            margin-left: 10px;
            margin-right: 10px;
            font-weight: normal;
        }

        #item-price {
            display: flex;
            align-content: center;
            flex-wrap: wrap;
            width: 100%;
            /*flex-basis: 625px;*/
            min-height: 1.875rem;
        }

        .items-center {
            display: flex;
            align-items: center;
        }

        #book-cover-price {
            font-size: 0.8rem;
            text-decoration: line-through;
            color: #929292;
            margin-left: 10px;
            margin-right: 10px;
            display: flex;
            align-items: center;
            /*margin-right: 10px;*/
            /*text-align:center;*/
        }

        #price {
            font-size: 1.2rem;
            font-weight: 500;
            color: #ee4d2d;
        }

        #discount {
            margin-left: 15px;
            font-size: .75rem;
            color: #fff;
            text-transform: uppercase;
            background: #ee4d2d;
            border-radius: 2px;
            padding: 2px 4px;
            font-weight: 600;
            line-height: 1;
            white-space: nowrap;
        }

        .variation-button {
            overflow: visible;
            cursor: pointer;
            min-width: 5rem;
            min-height: 2.5rem;
            box-sizing: border-box;
            padding: 0.5rem;
            padding-left: 2.5rem;
            margin: 8px 8px 0 0;
            color: rgba(0,0,0,.8);
            text-align: left;
            border-radius: 2px;
            border: 1px solid rgba(0,0,0,.09);
            position: relative;
            background: #fff;
            outline: 0;
            word-break: break-word;
            display: inline-flex;
            align-items: center;
            justify-content: center;
        }
        /*.variation-button:hover {
            border: 1px solid rgb(255, 0, 0);
        }*/
        .variation-image {
            width: 1.5rem;
            height: 1.5rem;
            position: absolute;
            left: 0.5rem;
            top: 50%;
            transform: translateY(-50%);
        }

        #check-container {
            position: absolute;
            display: block;
            width: 0.9375rem;
            height: 0.9375rem;
            overflow: hidden;
            right: 0;
            bottom: 0;
        }

            #check-container::before {
                border: 0.9375rem solid transparent;
                border-bottom: 0.9375rem solid rgb(255, 0, 0);
                content: "";
                position: absolute;
                right: -0.9375rem;
                bottom: 0;
            }

        .icon-tick-bold {
            color: #fff;
            font-size: 8px;
            position: absolute;
            right: 0;
            bottom: 0;
            display: inline-block;
            width: 1em;
            height: 1em;
            fill: currentColor;
        }

        .flex-items-center {
            display: flex;
            align-items: center;
            flex-wrap: wrap;
        }

        .shopee-input-quantity {
            background: #fff;
            display: flex;
            align-items: center;
        }

        .xNxl-t {
            outline: none;
            /*cursor: pointer;
            border: 0;
            font-size: .875rem;*/
            font-weight: 300;
            line-height: 1;
            letter-spacing: 0;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: background-color .1s cubic-bezier(.4,0,.6,1);
            border: 1px solid rgba(0,0,0,.09);
            border-radius: 2px;
            background: transparent;
            color: rgba(0,0,0,.8);
            width: 32px;
            height: 32px;
            font-size: 10px;
            flex-shrink: 0;
        }
        /*.xNxl-t:first-child {
            border-top-right-radius: 0;
            border-bottom-right-radius: 0;
        }*/

        .shopee-svg-icon {
            font-size: 10px;
            width: 10px;
            height: 10px;
            flex-shrink: 0
        }

        .VWjjde {
            width: 50px;
            height: 32px;
            border-left: 0;
            border-right: 0;
            font-size: 16px;
            font-weight: 400;
            box-sizing: border-box;
            text-align: center;
            cursor: text;
            border-radius: 0;
            -webkit-appearance: none;
            outline: none;
            line-height: 1;
            letter-spacing: 0;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: background-color .1s cubic-bezier(.4,0,.6,1);
            border: 1px solid rgba(0,0,0,.09);
            background: transparent;
            color: rgba(0,0,0,.8);
        }

        .I-H1Co {
            /*margin: 15px 0 0 110px;*/
            padding: 5px;
            color: #ff424f;
            display: none;
            /*border: 1px solid #73AD21;*/
        }

        .p-UZsF {
            padding: 5px;
            display: flex;
            /*padding-left: 0.9375rem;*/
            /*border: 1px solid #73AD21;*/
        }

        .btn-add-to-cart {
            position: relative;
            overflow: visible;
            outline: 0;
            background: rgba(208,1,27,.08);
            color: #d0011b;
            border: 1px solid #d0011b;
            box-shadow: 0 1px 1px 0 rgba(0,0,0,.03);
            height: 48px;
            padding: 0 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            text-transform: capitalize;
            flex-direction: row;
            cursor: pointer;
            margin-right: 0.9375rem;
            min-width: 8.25rem;
        }

            .btn-add-to-cart:hover {
                background: rgba(208,1,27,.05);
            }

        .btn-buy-now {
            position: relative;
            overflow: visible;
            outline: 0;
            background: #d0011b;
            color: #fff;
            height: 48px;
            padding: 0 20px;
            text-overflow: ellipsis;
            flex-direction: column;
            box-sizing: border-box;
            box-shadow: 0 1px 1px 0 rgba(0,0,0,.09);
            border-radius: 2px;
            border: 0;
            display: flex;
            align-items: center;
            justify-content: center;
            text-transform: capitalize;
            max-width: 250px;
            margin-right: 0.9375rem;
            min-width: 8.25rem;
            /*font-size: .875rem;*/
        }

            .btn-buy-now:hover {
                background: #ff424f;
            }

        .icon-add-to-cart {
            display: inline-block;
            width: 1em;
            height: 1em;
            fill: currentColor;
            position: relative;
            margin-right: 10px;
            color: #ee4d2d;
            stroke: #ee4d2d;
            font-size: 1.25rem;
        }

        .product-detail {
            box-shadow: 0 1px 1px 0 rgba(0,0,0,.05);
            border-radius: 0.125rem;
            overflow: hidden;
            background: #fff;
            margin-top: 0.9375rem;
            padding-top: 0.625rem;
            display: block;
        }

        .U9rGd1 {
            /*padding: 0.9375rem 0.9375rem 0;*/
            display: block;
        }

        .Iv7FJp {
            background: rgba(0,0,0,.02);
            color: rgba(0,0,0,.87);
            font-size: 1.125rem;
            font-weight: 400;
            margin: 0;
            padding: 0.875rem;
            text-transform: capitalize;
            display: block;
            /*font-size: 1.5em;*/
            /*margin-block-start: 0.83em;
            margin-block-end: 0.83em;
            margin-inline-start: 0px;
            margin-inline-end: 0px;*/
            /*font-weight: bold;*/
        }

        h2 {
            display: block;
            /*font-size: 1.5em;
            margin-block-start: 0.83em;
            margin-block-end: 0.83em;
            margin-inline-start: 0px;
            margin-inline-end: 0px;
            font-weight: bold;*/
        }

        .MCCLkq {
            margin: 0rem 0.9375rem 0.9375rem;
            display: block;
        }

        .dR8kXc {
            display: flex;
            margin-bottom: 0.75rem;
        }

        .zquA4o {
            color: rgba(0,0,0,.4);
            font-size: .875rem;
            box-sizing: border-box;
            width: 8.75rem;
            padding-right: 0.75rem;
        }

        .GvvZVe {
            color: #05a;
        }

        .f7AU53 {
            white-space: pre-wrap;
            color: rgba(0,0,0,.8);
            font-size: 1rem;
            overflow: hidden;
            text-overflow: ellipsis;
            line-height: 1.7;
            display: block;
            padding: 0px;
        }

        .irIKAp {
            margin: 0;
        }
    </style>
</head>
<body onload="HomePageShowItem()">
    <div id="biggestContainer">
        @Html.Partial("~/Views/Shared/biggestContainer_Top.cshtml")
        <div id="item-media-wrapper">
            <p id="item-object" style="display:none;">@ViewData["itemObject"]</p>
            <div id="item-medium-media">
                <img id="medium-image" style="display:none; object-fit:contain; object-position:center; width:100%; height:100%;" alt="No Image" />
                <video id="medium-video" style="display:none; object-fit:contain; object-position:center; width:100%; height:100%;" controls autoplay
                       muted="muted"></video>
            </div>
            <div id="item-small-media">
                <div id="item-small-media-container">

                </div>
            </div>
        </div>
        <div id="item-something-wrapper">
            <div id="item-name" style="width:100%">
                <h1 id="item-name-h1"></h1>
            </div>
            <div id="item-vote">

            </div>
            <div id="item-price">
                <div id="book-cover-price"><sup>₫</sup>117.000</div>
                <div class="items-center">
                    <div id="price"><sup>₫</sup>87.750</div>
                    <div id="discount">25% giảm</div>
                </div>
            </div>
            <div class="_7VDqtl">
                <div id="item-variation-container">

                </div>

                <div id="item-order">
                    <div class="flex-items-center">
                        <div style="margin-right: 15px;">
                            <div class="shopee-input-quantity">
                                <button aria-label="Decrease" class="xNxl-t" onclick="Decrease()">
                                    <svg xmlns="http://www.w3.org/2000/svg" xmlns: xlink="http://www.w3.org/1999/xlink" version="1.1" viewBox="0 0 10 10" x="0" y="0" class="shopee-svg-icon"><polygon points="4.5 4.5 3.5 4.5 0 4.5 0 5.5 3.5 5.5 4.5 5.5 10 5.5 10 4.5"></polygon></svg>
                                </button>
                                <input class="VWjjde" type="text" value="1" id="quantity-input"
                                       oninput="ValidateInput(event)">
                                <button aria-label="Increase" class="xNxl-t" onclick="Increase()">
                                    <svg xmlns="http://www.w3.org/2000/svg" xmlns: xlink="http://www.w3.org/1999/xlink" version="1.1" viewBox="0 0 10 10" x="0" y="0" class="shopee-svg-icon"><polygon points="10 4.5 5.5 4.5 5.5 0 4.5 0 4.5 4.5 0 4.5 0 5.5 4.5 5.5 4.5 10 5.5 10 5.5 5.5 10 5.5"></polygon></svg>
                                </button>
                            </div>
                        </div>
                        <div id="max-quatity">4992 sản phẩm có sẵn</div>
                    </div>
                </div>

                <div class="I-H1Co">Số lượng bạn chọn đã đạt mức tối đa của sản phẩm này</div>
            </div>
            <div class="p-UZsF">
                <button type="button" class="btn-add-to-cart" onclick="AddToCart()">
                    <svg xmlns="http://www.w3.org/2000/svg" xmlns: xlink="http://www.w3.org/1999/xlink" version="1.1"
                         viewBox="0 0 15 15" x="0" y="0" class="icon-add-to-cart">
                        <g>
                            <g>
                                <polyline fill="none" points=".5 .5 2.7 .5 5.2 11 12.4 11 14.5 3.5 3.7 3.5" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10">
                                </polyline>
                                <circle cx="6" cy="13.5" r="1" stroke="none">
                                </circle>
                                <circle cx="11.5" cy="13.5" r="1" stroke="none">
                                </circle>
                            </g>
                            <line fill="none" stroke-linecap="round" stroke-miterlimit="10" x1="7.5" x2="10.5" y1="7" y2="7">
                            </line>
                            <line fill="none" stroke-linecap="round" stroke-miterlimit="10" x1="9" x2="9" y1="8.5" y2="5.5">
                            </line>
                        </g>
                    </svg>
                    <span>thêm vào giỏ hàng</span>
                </button>
                <button type="button" class="btn-buy-now" onclick="BuyNow()">
                    Mua ngay
                </button>
            </div>
        </div>
        <div class="product-detail">
            <section class="U9rGd1">
                <h2 class="Iv7FJp">MÔ TẢ SẢN PHẨM</h2>
                <div class="MCCLkq">
                    <div class="f7AU53"></div>
                </div>
            </section>
        </div>
        <div class="other-product">

        </div>

        @Html.Partial("~/Views/Shared/Home/SelectedModal.cshtml")
        @Html.Partial("~/Views/Shared/Home/OverMaxModal.cshtml")

        @Html.Partial("~/Views/Shared/biggestContainer_Bottom.cshtml")
    </div>
    <script src="~/Scripts/web.play.with.me.update.width.js"></script>
    <script src="~/Scripts/web.play.with.me.common.js"></script>
    <script>
        let maxSmallMediaCanShow; // Số lượng iten có thể hiển thị
        let countOfSmallMedia; // Số lượng media gồm video + image
        let selectedIndex; // selected index media đang chọn hiện tại
        let listItemData;// Mảng item, phần tử đầu tiên là video nếu có, sau là ảnh
        let itemObject; // object item đại diện đối tượng item server trả về
        let varition; // Models trong item
        let selectedIdModel;// Id của model được chọn để mua
        let quantityInput; // Input trước oninput

        quantityInput = 1;

        let cartName;// key của giỏ hàng
        cartName = "cart";
        let limitQuantity = "Số lượng bạn chọn đã đạt mức tối đa của sản phẩm này";
        let dontSelectVariation = "Vui lòng chọn Phân loại hàng";
        // Get the modal nhắc chọn variation
        let modal = document.getElementById("myModal");
        // Get the modal nhắc số lượng trong giỏ vượt quá tồn kho
        let modalOverMax = document.getElementById("myModal-over-max");
        InitializeTickOkModal();

        // Constructor function for item objects
        function objMediaSrc(itemSrc, itemIsVideo) {
            this.src = itemSrc;
            this.isVideo = itemIsVideo;
        }

        // Constructor function for pair key/value in cart
        // format: id=123&q=10&real=1
        function objCartCookie(value) {
            if (DEBUG) {
                console.log("objCartCookie(value) CALL " + value);
            }
            let myArray = value.split("&");

            this.id = parseInt(myArray[0].split("=")[1]);
            this.q = parseInt(myArray[1].split("=")[1]);
            this.real = parseInt(myArray[2].split("=")[1])
        }

        // cookie có dạng: cart=id=123&q=10&real=1$id=321&q=1&real=0$....$id=321&q=2&real=0
        // id: mã model, q: số lượng thêm vào giỏ hàng, real: 1-thực sự chọn mua, 0-có thể mua sau này
        function GetListCartCookieFromCartCookie(cartCookie) {
            let listCartCookie = [];
            if (isEmptyOrSpaces(cartCookie))
                return listCartCookie;

            let myArray = cartCookie.split("$");
            for (let i = 0; i < myArray.length; i++) {
                listCartCookie.push(new objCartCookie(myArray[i]));
            }
            return listCartCookie;
        }

        // Từ list id quantity object lấy được string cookie
        function GetCartCookieFromListCartCookie(listCartCookie) {
            let cartCookie = "";
            for (let i = 0; i < listCartCookie.length; i++) {
                if (i == 0) {
                    cartCookie = "id=" + listCartCookie[i].id.toString() + "&q=" + listCartCookie[i].q.toString()
                        + "&real=" + listCartCookie[i].real.toString();
                }
                else {
                    cartCookie = cartCookie + "$id=" + listCartCookie[i].id.toString()
                        + "&q=" + listCartCookie[i].q.toString() + "&real=" + listCartCookie[i].real.toString();
                }

            }
            return cartCookie;
        }

        // Nếu đối tượng tồn tại, tăng quantity tương ứng, nếu không insert ở đầu mảng
        // Nếu đối tượng đã tồn tại, khi tăng quantity tương ứng có thể vượt quá tồn kho. Nếu vượt quá trả về true
        function InsertAtBeginToListCartCookieCheckExist(listCartCookie, cartCookieObj, maxQuantity) {
            let exist = false;
            let overMax = false;
            for (let i = 0; i < listCartCookie.length; i++) {
                if (listCartCookie[i].id == cartCookieObj.id) {
                    exist = true;
                    listCartCookie[i].q = listCartCookie[i].q + cartCookieObj.q;
                    if (listCartCookie[i].q > maxQuantity) {
                        listCartCookie[i].q = maxQuantity; // Set số lượng về max tồn kho
                        overMax = true;
                    }
                    break;
                }
            }
            if (exist == false) {
                listCartCookie.unshift(cartCookieObj);
            }
            return overMax;
        }

        function HomePageShowItem() {
            itemObject = JSON.parse(document.getElementById("item-object").textContent);
            if (DEBUG) {
                console.log(itemObject);
            }
            if (itemObject == null)
                return;

            // Show small media
            let itemSmallMedia = document.getElementById("item-small-media");
            itemSmallMedia.style.position = "relative";

            // Tính chiều cao item-medium-media
            if (scrWidth >= 500) {
                document.getElementById("item-medium-media").style.height = "500px";
            }
            else {
                document.getElementById("item-medium-media").style.height = scrWidth + "px";
            }

            // Mỗi video, image item sẽ chiếm 100(width) + 5(margin lef) + 5(margin lef) + 2(border) = 111 px
            // Tính số item có thể hiển thị
            maxSmallMediaCanShow = Math.floor(scrWidth / 112);
            if (itemObject.videoSrc != null) {
                countOfSmallMedia = 1;
            }
            else {
                countOfSmallMedia = 0;
            }
            countOfSmallMedia = countOfSmallMedia + itemObject.imageSrc.length;

            // Cập nhật dữ liệu cho listItemData
            listItemData = [];
            if (itemObject.videoSrc != null && itemObject.videoSrc.length > 0) {
                listItemData.push(new objMediaSrc(itemObject.videoSrc, true));
            }
            for (let i = 0; i < itemObject.imageSrc.length; i++) {
                listItemData.push(new objMediaSrc(itemObject.imageSrc[i], false));
            }

            if (DEBUG) {
                console.log("scrWidth: " + scrWidth);
                console.log("maxSmallMediaCanShow: " + maxSmallMediaCanShow);
                console.log("countOfSmallMedia: " + countOfSmallMedia);
                console.log("selectedIndex: " + selectedIndex);
                console.log("listItemData: " + JSON.stringify(listItemData));
            }

            ShowSmallItem(0);

            ShowRightLeftArrow(itemSmallMedia);

            // Chọn item đầu tiên
            ChangeSelectedItem(document.getElementById("item-small-media-container").children[0]);

            ShowItemSomthing();

            // Hien thi mo ta chi tiet san pham
            ShowProductDescription();
        }

        function CreateContainerSmallItem(ItemData, i) {
            if (DEBUG) {
                console.log(JSON.stringify(ItemData));
            }
            const container = document.createElement("div");
            container.className = "small-media";
            container.setAttribute("data-index", i);
            if (ItemData.isVideo) {
                const video = document.createElement("video");
                video.src = ItemData.src;
                video.controls = false;
                container.style.position = "relative";

                // Thêm video icon
                let videoIcon123 = document.createElement("div");
                videoIcon123.style.position = "absolute"
                videoIcon123.style.top = "30px";
                videoIcon123.style.left = "30px"
                videoIcon123.style.width = "40px";
                videoIcon123.style.height = "40px";
                videoIcon123.style.zIndex = 1;
                videoIcon123.innerHTML = '<svg xmlns = "http://www.w3.org/2000/svg" xmlns: xlink = "http://www.w3.org/1999/xlink" version = "1.1" width = "40" height = "40" viewBox = "0 0 256 256" xml: space = "preserve" ><g style="stroke: none; stroke-width: 0; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: none; fill-rule: nonzero; opacity: 1;" transform="translate(1.4065934065934016 1.4065934065934016) scale(2.81 2.81)"> <path d="M 45 0 C 20.147 0 0 20.147 0 45 c 0 24.853 20.147 45 45 45 s 45 -20.147 45 -45 C 90 20.147 69.853 0 45 0 z M 62.251 46.633 L 37.789 60.756 c -1.258 0.726 -2.829 -0.181 -2.829 -1.633 V 30.877 c 0 -1.452 1.572 -2.36 2.829 -1.634 l 24.461 14.123 C 63.508 44.092 63.508 45.907 62.251 46.633 z" style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: rgb(0,0,0); fill-rule: nonzero; opacity: 1;" transform=" matrix(1 0 0 1 0 0) " stroke-linecap="round" /> </g> </svg >';

                container.appendChild(video);
                container.appendChild(videoIcon123);
            }
            else {
                const img = document.createElement("img");
                img.src = ItemData.src;
                container.appendChild(img);
            }
            container.addEventListener("mouseenter", function (event) {
                ChangeSelectedItem(event.currentTarget);
            });

            return container;
        }

        function ShowSmallItem(
            start // index của item đầu tiên
        ) {
            if (DEBUG) {
                console.log("ShowSmallItem CALL: ");
                console.log("start: " + start);
            }
            let itemSmallMediaContainer = document.getElementById("item-small-media-container");
            // Xóa item cũ nếu có
            itemSmallMediaContainer.innerHTML = "";

            for (let i = start; i < listItemData.length && i < start + maxSmallMediaCanShow; i++) {
                itemSmallMediaContainer.appendChild(CreateContainerSmallItem(listItemData[i], i));
            }
        }

        function ShowRightLeftArrow(itemSmallMedia) {
            if (countOfSmallMedia > maxSmallMediaCanShow) {
                // Add mũi tên di chuyển sang trái
                let leftArrow = document.createElement("div");
                leftArrow.className = "right-left-arrow";
                leftArrow.style.position = "absolute"
                leftArrow.style.top = "10px"
                leftArrow.style.width = "40px";
                leftArrow.style.height = "100px";
                leftArrow.style.zIndex = 1;
                leftArrow.innerHTML = '<svg  xmlns="http://www.w3.org/2000/svg" version="1.1" height="100" width="40" fill-opacity="0.4"> <polygon points="10,50 30,30 30,70" style="fill:lime;" /> </svg>';
                leftArrow.addEventListener("click", function () {

                    let itemContainer = document.getElementById("item-small-media-container");
                    let i = parseInt(itemContainer.children[0].getAttribute("data-index"));
                    if (i == 0)
                        return;
                    i = i - 1;
                    if (DEBUG) {
                        console.log("i: " +i);
                    }
                    // Xóa item cuối cùng
                    itemContainer.lastElementChild.remove();
                    // Thêm item tử đầu tiên
                    let firstItem = CreateContainerSmallItem(listItemData[i], i);
                    if (i == selectedIndex) {
                        firstItem.style.borderColor = "rgb(255, 0, 0)";
                    }
                    itemContainer.insertBefore(firstItem, itemContainer.children[0]);
                });
                itemSmallMedia.appendChild(leftArrow);

                // Add mũi tên di chuyển sang phải
                let rightArrow = document.createElement("div");
                rightArrow.className = "right-left-arrow";
                rightArrow.style.position = "absolute";
                rightArrow.style.top = "10px"
                rightArrow.style.right = "0px";
                rightArrow.style.width = "40px";
                rightArrow.style.height = "100px";
                rightArrow.style.zIndex = 1;
                rightArrow.innerHTML = '<svg  xmlns="http://www.w3.org/2000/svg" version="1.1" height="100" width="40" fill-opacity="0.4"> <polygon points="10,30 30,50 10,70" style="fill:lime;" /> </svg>';
                rightArrow.addEventListener("click", function () {

                    let itemContainer = document.getElementById("item-small-media-container");
                    let i = parseInt(itemContainer.lastElementChild.getAttribute("data-index"));
                    if (i == countOfSmallMedia - 1) {
                        return;
                    }

                    i = i + 1;
                    if (DEBUG) {
                        console.log("i: " + i);
                    }
                    // Xóa item đầu tiên
                    itemContainer.firstElementChild.remove();
                    // Thêm item cuối cùng
                    let lastItem = CreateContainerSmallItem(listItemData[i], i);
                    if (i == selectedIndex) {
                        lastItem.style.borderColor = "rgb(255, 0, 0)";
                    }
                    itemContainer.insertBefore(lastItem, null);
                });
                itemSmallMedia.appendChild(rightArrow);
            }
        }

        // Show medium item từ small item đã chọn, đã đặt chuột
        function ShowMediumItemFromSelectedSmallItem(i) {
            // Show medium media
            let mediumImage = document.getElementById("medium-image");

            let mediumVideo = document.getElementById("medium-video");
            if (listItemData[i].isVideo) {
                //if (DEBUG) {
                //    console.log("mediumVideo.src: " + mediumVideo.src);
                //}

                if(isEmptyOrSpaces(mediumVideo.src)) {
                    mediumVideo.src = listItemData[i].src;
                }

                //if (DEBUG) {
                //    console.log("mediumVideo.src: " + mediumVideo.src);
                //}

                if (mediumVideo.style.display != "block") {
                    mediumVideo.play();
                    mediumVideo.style.display = "block";
                    mediumImage.style.display = "none";
                }
            }
            else {
                mediumImage.src = listItemData[i].src;
                if (mediumVideo.src != null) {
                    mediumVideo.pause();
                }
                if (mediumImage.style.display != "block") {
                    mediumVideo.style.display = "none";
                    mediumImage.style.display = "block";
                }
            }
        }

        // Show medium item tư variation đã chọn, đã đặt chuột
        // Hiển thị ảnh đại diện của variation
        function ShowMediumItemFromSelectedVariation(src) {
            let mediumImage = document.getElementById("medium-image");

            let mediumVideo = document.getElementById("medium-video");
            mediumImage.src = src;

            if (DEBUG) {
                console.log("ShowMediumItemFromSelectedVariation Call");
                console.log("src: " + src);
            }
            if (mediumVideo.style.display != "none") {
                mediumVideo.style.display = "none";
                mediumVideo.pause();
                mediumImage.style.display = "block";
            }
        }

        function ShowProductDescription() {
            if (DEBUG) {
                console.log("ShowProductDescription CALL");
            }
 
            if (itemObject.detail == null) {
                // An mo ta san pham
                document.getElementsByClassName("product-detail")[0].style.display = "none";
                return;
            }

            let p = document.createElement("p");
            p.className = "irIKAp";
            p.innerHTML = itemObject.detail;
            document.getElementsByClassName("f7AU53")[0].appendChild(p);
        }

        function GetModelObjectFromModelId(modelId) {
            for (let i = 0; i < itemObject.models.length; i++) {
                if (modelId == itemObject.models[i].id) {
                    return itemObject.models[i];
                }
            }
        }
        // Thay đổi medium media theo variation đã chọn, nếu chưa chọn variation thì check theo small item đã chọn
        function ShowMediumMediaFromSelectedObj()
        {
            // Variation đã chọn và có từ 2 biến thể/ model trở lên
            if (selectedIdModel != null && itemObject.models.length > 1) {
                ShowMediumItemFromSelectedVariation(GetModelObjectFromModelId(selectedIdModel).imageSrc);
            }
            else {
                // Hiển thị small item/media đã chọn
                ShowMediumItemFromSelectedSmallItem(selectedIndex);
            }
        }

        // Thay đổi medium media khi di chuyển bên trên small item
        function ChangeSelectedItem(newSelectedItem) {
            if (DEBUG) {
                console.log("ChangeSelectedItem call: ");
                console.log("newSelectedItem.data-index: " + parseInt(newSelectedItem.getAttribute("data-index")));
            }

            if (selectedIndex != null) {
                if (selectedIndex == parseInt(newSelectedItem.getAttribute("data-index")))// là 1 element
                    return;
            }
            let oldSelectedItem = selectedIndex;
            selectedIndex = parseInt(newSelectedItem.getAttribute("data-index"));
            if (DEBUG) {
                console.log("selectedIndex: " + selectedIndex);
            }

            // Set border color về màu không được chọn
            if (oldSelectedItem != null) {
                let itemSmallMediaContainer = document.getElementById("item-small-media-container");
                for (let i = 0; i < itemSmallMediaContainer.children.length; i++) {
                    if (parseInt(itemSmallMediaContainer.children[i].getAttribute("data-index")) == oldSelectedItem) {
                        itemSmallMediaContainer.children[i].style.borderColor = "rgb(228, 228, 222)";
                        break;
                    }
                }
            }

            // Set border color về màu không được chọn
            newSelectedItem.style.borderColor = "rgb(255, 0, 0)";

            // Hiển thị item ở kích thước to hơn
            ShowMediumItemFromSelectedSmallItem(selectedIndex);
        }

        function VariationClick(newSelectVariation) {
            // Lấy id variation/ model
            let id = parseInt(newSelectVariation.getAttribute("data-model-id"));
            if (DEBUG) {
                console.log("id of model: " + id);
            }

            // Bỏ dòng chữ chưa chọn phân loại hàng nếu đang hiển thị
            {
                if (document.getElementsByClassName("I-H1Co")[0].style.display != "none") {
                    document.getElementsByClassName("I-H1Co")[0].style.display = "none";
                }
                // Thay màu nền div chứa phân loại về mặc định
                document.getElementsByClassName("_7VDqtl")[0].style.backgroundColor = "initial";
            }
            // Bỏ chọn variontion cũ nếu có
            if (selectedIdModel != null)
            {
                if (selectedIdModel != id) {//  Bỏ chọn border màu đỏ button cũ
                    document.getElementById("check-container").parentElement.style.borderColor = "rgba(0, 0, 0, .09)";
                }
                // Bỏ icon V
                document.getElementById("check-container").remove();
                if (selectedIdModel == id) {
                    selectedIdModel = null;
                    //ShowPrice();
                    ShowPriceAndReadyMaxQuantity();
                    return;
                }
            }

            selectedIdModel = id;
            // Hiển thị đã chọn V đỏ góc dưới phải nếu chưa có, có rồi thì bỏ chọn
            let checkContainer = document.createElement("div");
            checkContainer.id = "check-container";

            checkContainer.innerHTML = '<svg xmlns = "http://www.w3.org/2000/svg" xmlns: xlink = "http://www.w3.org/1999/xlink" version = "1.1" viewBox="0 0 12 12" class="shopee-svg-icon icon-tick-bold"><g><path d="m5.2 10.9c-.2 0-.5-.1-.7-.2l-4.2-3.7c-.4-.4-.5-1-.1-1.4s1-.5 1.4-.1l3.4 3 5.1-7c .3-.4 1-.5 1.4-.2s.5 1 .2 1.4l-5.7 7.9c-.2.2-.4.4-.7.4 0-.1 0-.1-.1-.1z"></path></g></svg>';
            newSelectVariation.appendChild(checkContainer);
            // Luôn hiển thị border màu đỏ với variation đã chọn
            newSelectVariation.style.borderColor = "rgb(255, 0, 0)";
            //ShowPrice();
            ShowPriceAndReadyMaxQuantity();
        }

        // Lấy số lượng max của 1 variation/model.
        // Nếu chưa chọn variation / model số lượng max = tổng số lượng các variation / model
        // trong item
        function GetMaxQuantityInput() {
            let maxQuantity = 0;
            if (selectedIdModel == null) { // tổng số lượng các variation / model trong item
                for (let i = 0; i < itemObject.models.length; i++) {
                    maxQuantity = maxQuantity + itemObject.models[i].quantity;
                }
            }
            else {
                maxQuantity = GetModelObjectFromModelId(selectedIdModel).quantity;
            }
            return maxQuantity;
        }

        // Thay đổi medium media khi di chuyển chuột trên variation button
        function VariationMouseEnter(newSelectVariation) {
            newSelectVariation.style.borderColor = "rgba(255, 0, 0)";
            if (DEBUG) {
                console.log("VariationMouseEnter Call");
                let id = parseInt(newSelectVariation.getAttribute("data-model-id"));
                console.log("id of model: " + id);
            }
            ShowMediumItemFromSelectedVariation(newSelectVariation.getElementsByClassName("variation-image")[0].src);
        }

        // Thay đổi medium media khi di chuyển chuột ra khỏi variation button
        function VariationMouseLeave(newSelectVariation) {
            if (DEBUG) {
                console.log("VariationMouseLeave Call");
                let id = parseInt(newSelectVariation.getAttribute("data-model-id"));
                console.log("id of model: " + id);
            }
            ShowMediumMediaFromSelectedObj();
            if (parseInt(newSelectVariation.getAttribute("data-model-id")) != selectedIdModel) {
                newSelectVariation.style.borderColor = "rgba(0, 0, 0, .09)";
            }
        }

        function GetModelObjectFromModelId(modelId) {
            let modelObject = null;
            for (let i = 0; i < itemObject.models.length; i++) {
                if (modelId == itemObject.models[i].id) {
                    modelObject = itemObject.models[i];
                    break;
                }
            }
            return modelObject;
        }
        // Show giá bìa, giá bán và % triết khấu
        function ShowPrice()
        {
            // Chưa chọn model nên ta hiển thị biến thể giá nhỏ nhất - đắt nhất, chiết khấu lớn nhất,
            // thường các biến thể cùng item sẽ chiết khấu như nhau
            if (selectedIdModel == null) {
                // Giá bìa
                document.getElementById("book-cover-price").innerHTML = "<sup>₫</sup>" + ConvertMoneyToText(itemObject.cheapestModel.bookCoverPrice) + " - " +
                    "<sup>₫</sup>" + ConvertMoneyToText(itemObject.mostExpensiveModel.bookCoverPrice);

                // Giá bán thực tế
                document.getElementById("price").innerHTML = "<sup>₫</sup>" + ConvertMoneyToText(itemObject.cheapestModel.price) + " - " +
                    "<sup>₫</sup>" + ConvertMoneyToText(itemObject.mostExpensiveModel.price);

                // % Chiết khấu
                let discount = itemObject.cheapestModel.discount;
                if (discount < itemObject.mostExpensiveModel.discount) {
                    discount = itemObject.mostExpensiveModel.discount;
                }

                document.getElementById("discount").innerHTML = discount + "% GIẢM";
            }
            else {
                let modelObject = GetModelObjectFromModelId(selectedIdModel);

                // Giá bìa
                document.getElementById("book-cover-price").innerHTML = "<sup>₫</sup>" + ConvertMoneyToText(modelObject.bookCoverPrice);

                // Giá bán thực tế
                document.getElementById("price").innerHTML = "<sup>₫</sup>" + ConvertMoneyToText(modelObject.price);

                // % Chiết khấu
                let discount = modelObject.discount;
                document.getElementById("discount").innerHTML = discount + "% GIẢM";
            }
        }

        function ShowReadyMaxQuantity() {
            document.getElementById("max-quatity").innerHTML = GetMaxQuantityInput().toString() + " sản phẩm có sẵn";
        }

        function ShowPriceAndReadyMaxQuantity() {
            ShowPrice();
            ShowReadyMaxQuantity();

            // Refresh input quantity ve 1
            quantityInput = 1;
            if (GetMaxQuantityInput() == 0)
                quantityInput = 0;
            document.getElementById("quantity-input").value = quantityInput.toString();
            if (document.getElementsByClassName("I-H1Co")[0].style.display != "none") {
                document.getElementsByClassName("I-H1Co")[0].style.display = "none";
            }
        }
        // Gồm: Tên, giá bìa, giá chiết khấu, lựa chọn
        function ShowItemSomthing() {
            if (itemObject == null)
                return;

            // Show tên
            document.getElementById("item-name-h1").innerHTML = itemObject.name;

            if (itemObject.models.length > 1) {
                // Thêm các biến thể
                let variationContainer = document.getElementById("item-variation-container");
                for (let i = 0; i < itemObject.models.length; i++) {
                    let variationButton = document.createElement("button");
                    variationButton.type = "button";
                    variationButton.innerHTML = itemObject.models[i].name;
                    variationButton.className = "variation-button";
                    variationButton.setAttribute("data-model-id", itemObject.models[i].id);
                    variationButton.addEventListener("click", function (event) {
                        VariationClick(event.currentTarget);
                    });

                    variationButton.addEventListener("mouseenter", function (event) {
                        VariationMouseEnter(event.currentTarget);
                    });

                    variationButton.addEventListener("mouseleave", function (event) {
                        VariationMouseLeave(event.currentTarget);
                    });

                    let variationImg = document.createElement("img");
                    variationImg.className = "variation-image";
                    variationImg.src = itemObject.models[i].imageSrc;
                    variationButton.appendChild(variationImg);

                    variationContainer.appendChild(variationButton);
                }
            }
            else {
                // Mặc định chọn biến thể là model duy nhất
                selectedIdModel = itemObject.models[0].id;
            }
            // Show giá bìa, giá bán và % triết khấu, so luong max
            ShowPriceAndReadyMaxQuantity();
        }

        function Decrease() {
            if (quantityInput > 1) {
                quantityInput = quantityInput - 1;
                document.getElementById("quantity-input").value = quantityInput.toString();
            }
            if (document.getElementsByClassName("I-H1Co")[0].style.display != "none") {
                document.getElementsByClassName("I-H1Co")[0].style.display = "none";
            }
        }
        function Increase() {
            let maxQuatity = GetMaxQuantityInput();
            if (quantityInput < maxQuatity) {
                quantityInput = quantityInput + 1;
                document.getElementById("quantity-input").value = quantityInput.toString();
            }
            else {
                document.getElementsByClassName("I-H1Co")[0].innerHTML = limitQuantity;
                document.getElementsByClassName("I-H1Co")[0].style.display = "block";
            }
        }

        function ValidateInput(event) {
            let newInput = document.getElementById("quantity-input").value;
            if (DEBUG) {
                console.log("ValidateInput: ");
                console.log("newInput: " + newInput);
                console.log("quantityInput: " + quantityInput);
            }

            if (IsNumeric(newInput)) {
                let iInput = ConvertToInt(newInput);
                let maxQuantity = GetMaxQuantityInput();
                if (iInput === 0) {
                    quantityInput = 1;
                    if (maxQuantity == 0) {
                        quantityInput = 0;
                    }
                }

                if (iInput > maxQuantity) {
                    quantityInput = maxQuantity;
                    document.getElementsByClassName("I-H1Co")[0].style.display = "block";
                }
                else {
                    quantityInput = iInput;
                    if (document.getElementsByClassName("I-H1Co")[0].style.display != "none") {
                        document.getElementsByClassName("I-H1Co")[0].style.display = "none";
                    }
                }
            }
            document.getElementById("quantity-input").value = quantityInput.toString();

        }

        // Thêm sản phẩm muốn mua vào giỏ hàng
        // cookie có dạng: cart=id=123&q=10&real=1$id=321&q=1&real=0$....$id=321&q=2&real=0
        function AddToCart() {
            //// Xóa cookie
            //SetCookie(cartName, "", 365);
            //return;

            // Chưa chọn phân loại hiện thị thông báo dòng chữ đỏ và thay màu nền div chứa phân loại
            if (selectedIdModel == null)
            {
                document.getElementsByClassName("I-H1Co")[0].innerHTML = dontSelectVariation;
                document.getElementsByClassName("I-H1Co")[0].style.display = "block";
                // Thay màu nền div chứa phân loại
                document.getElementsByClassName("_7VDqtl")[0].style.backgroundColor = "#dee2e6";
                return;
            }

            // Lấy cookie cũ
            let oldCart = GetCookie(cartName);

            let listCartCookie = GetListCartCookieFromCartCookie(oldCart);
            if (DEBUG) {
                console.log("listCartCookie of oldCart: " + JSON.stringify(listCartCookie));
            }
            let q = parseInt(document.getElementById("quantity-input").value);
            let maxQuantity = GetMaxQuantityInput();
            let obj = new objCartCookie("id=" + selectedIdModel.toString() + "&q=" + q.toString()
                + "&real=1"); 
            if (DEBUG) {
                console.log("maxQuantity: " + maxQuantity);
                console.log("obj: " + JSON.stringify(obj));
            }
            let overMax = InsertAtBeginToListCartCookieCheckExist(listCartCookie, obj, maxQuantity);
            if (overMax) { // Hiện thị modal thông báo
                document.getElementsByClassName("shopee-alert-popup__message")[0].innerHTML =
                    "Bạn đã có " + maxQuantity.toString() + " sản phẩm trong giỏ hàng. Không thể thêm số lượng đã chọn vào giỏ hàng vì sẽ vượt quá giới hạn mua hàng của bạn"
                modalOverMax.style.display = "flex";
            }
            if (DEBUG) {
                console.log("listCartCookie after InsertAtBeginToListCartCookieCheckExist: " + JSON.stringify(listCartCookie));
            }
            let newCart = GetCartCookieFromListCartCookie(listCartCookie);

            SetCookie(cartName, newCart, 365);

            if (DEBUG) {
                GetCookie(cartName);
            }
            if (overMax) {
                return;
            }
            ShowModal();
            setTimeout(CloseModal, 3000);
        }

        function BuyNow() {

        }

        function CloseModal() {
            modal.style.display = "none";
        }

        function CloseOverMaxModal() {
            modalOverMax.style.display = "none";
        }

        function ShowModal() {
            if (DEBUG) {
                console.log("ShowModal CALL");
            }
            modal.style.display = "flex";
        }

        function InitializeTickOkModal() {
            // Get the <span> element that closes the modal
            let tickOk = document.getElementsByClassName("tick-ok")[0];

            tickOk.onclick = function () {
                CloseModal();
            }

            // When the user clicks anywhere outside of the modal, close it
            window.onclick = function (event) {
                if (event.target == modal) {
                    CloseModal();
                }
            }
        }
    </script>
</body>
</html>
