@*@model IEnumerable<MVCPlayWithMe.Models.Item>*@
@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    @Html.Partial("~/Views/Shared/Head.cshtml")
    <style>
        .product-item {
            text-decoration: none;
            display: block;
            cursor: pointer;
            border-radius: 10px;
            height: 100%;
            background: white;
        }

            .product-item:hover {
                background: #e1e1e1;
                border: 1px solid #d0d0d0;
            }

        .image-wrapper {
            max-width: 100%;
            height: auto;
        }

        .card-img-top {
            border-top-right-radius: 10px;
            border-top-left-radius: 10px;
        }

        .product-name > h3 {
            font-weight: 400;
            font-size: 14px;
            color: rgb(56, 56, 61);
            margin: 0px;
            word-break: break-word;
            width: 180px;
            overflow: hidden;
            text-overflow: ellipsis;
            display: -webkit-box;
            -webkit-box-orient: vertical;
            -webkit-line-clamp: 2; /* number of lines to show */
            line-height: 1.5em;
            max-height: 3em;
        }
    </style>
</head>
<body onload="Search()">
    <div id="biggestContainer">
        @Html.Partial("~/Views/Shared/biggestContainer_Top.cshtml")

        @Html.Partial("~/Views/Shared/Home/SearchResult.cshtml")

        @Html.Partial("~/Views/Shared/biggestContainer_Bottom.cshtml")
    </div>
    <script src="~/Scripts/web.play.with.me.update.width.js"></script>
    <script src="~/Scripts/web.play.with.me.common.js"></script>
    <script src="~/Scripts/web.play.with.me.paging.js"></script>
    <script>
        // Tham số tìm kiếm
        let namePara;
        // Đảm bảo item trên 1 page chia hết số item trên 1 row
        itemOnPage = itemOnRow * rowOnPage;
        // Mục đích lấy số lượng trong kết quả trả về phục vụ phân trang
        async function Search() {
            namePara = "";

            let url = "/Home/SearchItemCount";
            const searchParams = new URLSearchParams();
            SetSearchParameter(searchParams);
            let resObj = await RequestHttpGetPromise(searchParams, url);
            // Lấy số lượng sản phẩm trong kết quả trả về
            countItem = parseInt(resObj.responseText);
            if (countItem == 0) {
                EmptySomethingV1();
                return;
            }

            document.getElementById("empty-result").style.display = "none";
            document.getElementById("search-result").style.display = "block";

            maxPage = Math.floor(countItem / itemOnPage);
            if (countItem % itemOnPage != 0)
                maxPage = maxPage + 1;
            currentPage = -1; // Làm mới currentPage
            // Lấy dữ liệu cho page 1
            ChangePage(1, "/Home/ChangePage");
        }

        function SetSearchParameter(searchParams) {
            searchParams.append("namePara", namePara);
        }
        // Từ danh sách model tính được tổng số lượng model đã bán, model rẻ nhất, model đắt nhất
        function SetPriceAndQuantity(item)
        {
            let cheapest = 100000000;
            //let mostExpensive = 0;
            let cheapestBookCoverPrice = 100000000;
            let sumSoldQuantity = 0;
            for (let i = 0; i < item.models.length; i++)
            {
                let model = item.models[i];
                sumSoldQuantity = sumSoldQuantity + model.soldQuantity;
                // giá bìa rẻ nhất
                if (cheapest > model.price) {
                    cheapest = model.price;
                    cheapestBookCoverPrice = model.bookCoverPrice;
                }

                //// giá bìa đắt nhất
                //if (mostExpensive < model.price) {
                //    mostExpensive = model.price;
                //}
            }
            item.cheapest = cheapest;
            item.cheapestBookCoverPrice = cheapestBookCoverPrice;
            item.discount = 100 - Math.floor((cheapest / cheapestBookCoverPrice) * 100);
            //item.mostExpensive = mostExpensive;
            item.sumSoldQuantity = sumSoldQuantity;
        }

        function ShowSearchingResult(resObj) {
            TopFunction();
            let listItem = JSON.parse(resObj.responseText);

            // Làm trống
            document.getElementById("biggestContainer_body_wraper_item").innerHTML = "";

            // Show
            let table = document.getElementById("biggestContainer_body_wraper_item");
            let length = listItem.length;
            // Lấy mẫu
            let sample = document.getElementById("product-for-selector-sample");

            for (let i = 0; i < length; i++) {
                let item = listItem[i];
                let itemElement = sample.cloneNode(true);

                // Thay đổi id
                itemElement.id = "hardcode" + i;
                // Set link chi tiết sản phẩm
                itemElement.getElementsByClassName("product-item")[0].href = "/Home/Item?id=" + item.id;
                // Hiển thị vì sample đang ẩn
                itemElement.style.display = "block";
                itemElement.getElementsByClassName("card-img-top")[0].src = item.thumbnailFirst;
                itemElement.getElementsByClassName("product-name-h3")[0].innerHTML = item.name;
                SetPriceAndQuantity(item);
                itemElement.getElementsByClassName("rating-quantity-sold-p")[0].innerHTML = "Đã bán " + item.sumSoldQuantity + " bộ";
                itemElement.getElementsByClassName("price-sell-detail")[0].innerHTML = item.cheapest;
                    + "<sup>₫</sup>";
                itemElement.getElementsByClassName("price-original-detail")[0].innerHTML = item.cheapestBookCoverPrice
                    + "₫";

                itemElement.getElementsByClassName("price-discount-percent-detail")[0].innerHTML = "-" + item.discount + "%";

                table.appendChild(itemElement);
            }
        }
    </script>
</body>
</html>
