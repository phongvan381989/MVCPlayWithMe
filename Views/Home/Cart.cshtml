
@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <title>Play with me</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=0">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
    <link rel="stylesheet" href="~/Content/web.play.with.me.common.css">
    <link rel="stylesheet" href="~/Content/web.play.with.me.modal.common.css">
    <style>
        .stardust-checkbox {
            font-family: -apple-system,HelveticaNeue-Light,Helvetica Neue Light,Helvetica Neue,Helvetica,Roboto,Droid Sans,Arial,sans-serif;
            font-weight: 300;
            font-size: 12px;
            display: flex;
            align-items: center;
            cursor: default;
            position: relative;
            color: rgba(0,0,0,.54);
            max-width: 400px;
        }

        .stardust-checkbox__input {
            width:20px;
            height:20px;
        }

        .stardust-checkbox__box {
            -webkit-user-select: none;
            -moz-user-select: none;
            user-select: none;
            position: relative;
            width: 16px;
            height: 16px;
            flex-shrink: 0;
            border-radius: 2px;
            border: 1px solid rgba(0,0,0,.14);
            text-align: center;
            box-shadow: inset 0 2px 0 0 rgba(0,0,0,.02);
            margin-right: 8px;
        }

        .stardust-checkbox__box:before {
            position: absolute;
            content: "";
            height: 5px;
            width: 9px;
            border-left: 2px solid #fff;
            border-bottom: 2px solid #fff;
            transform: rotate(-45deg);
            left: 3px;
            top: 3px;
        }

        .BjIo5w {
            display: flex;
            align-items: center;
            box-shadow: 0 1px 1px 0 rgba(0,0,0,.05);
            overflow: hidden;
            border-radius: 3px;
            height: 55px;
            /*font-size: 16px;*/
            background: #fff;
            margin-bottom: 20px;
            margin-right: 5px;
            margin-left: 5px;
            color: #888;
            padding: 0 5px;
        }
        .checkbox-name-header, .price-quantity-sum-delete-header {
            display: flex;
            align-items: center;
            width: 50%;
        }

        .mcsiKT {
            padding: 0 10px 0 10px;
            display: flex;
            flex-direction: row-reverse;
            min-width: 40px;
            box-sizing: border-box;
        }
        .mcsiKT-header{
            visibility:hidden;
        }

        .yl931K {
            color: rgba(0,0,0,.8);
            width: 90%;
        }

        .pZMZa7 {
            width: 30%;
            text-align: center;
        }

        .lKFOxX {
            width: 35%;
            text-align: center;
        }

        ._5f317z {
            width: 20%;
            text-align: center;
        }
        ._4E7yJ {
            width: 15%;
            text-align: center;
        }
        .zoXdNN {
            display: flex;
            align-items: center;
            padding: 30px 0px;
            border-bottom: 1px solid rgba(0,0,0,.09);
        }
        .checkbox-name {
            display: flex;
            width: 50%;
            align-items: center;
        }
        .price-quantity-sum-delete {
            display: flex;
            align-items: center;
            width: 50%;
        }
        .eUrDQm {
            display: flex;
            width: 90%;
            position: relative;
            flex-direction: column;
        }

        .LAQKxn {
            display: flex;
        }

        a {
            cursor: pointer;
        }

        .WanNdG {
            width: 80px;
            height: 80px;
            object-fit: cover;
        }

        .TyNN8t {
            line-height: 16px;
            overflow: hidden;
            display: flex;
            flex: 1;
            flex-direction: column;
            padding: 5px 20px 0 10px;
            /*font-size: 14px;*/
        }

        .JB57cn {
            text-decoration: none;
            color: rgba(0,0,0,.87);
            margin-bottom: 5px;
            max-height: 32px;
            text-overflow: ellipsis;
            word-break: break-all;
            display: -webkit-box;
            -webkit-box-orient: vertical;
            -webkit-line-clamp: 2;
            line-height: 16px;
            overflow: hidden;
        }
        .contianer-selected-model {
            box-shadow: 0 1px 1px 0 rgba(0,0,0,.05);
            /*border-radius: 0.125rem;*/
            overflow: hidden;
            border-radius: 3px;
            font-size: 14px;
            background: #fff;
            margin-bottom: 20px;
            margin-right: 5px;
            margin-left: 5px;
            color: #888;
            padding: 0 5px;
        }

        .M-AAFK {
            margin-right: 10px;
        }
        .vWt6ZL {
            color: rgba(0,0,0,.54);
            text-decoration: line-through;
        }
        .G7E4B7 {
            flex-direction: column;
            width: 30%;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .MRh9G6 {
            display: flex;
            align-items: center;
            justify-content: center;
            flex-direction: column;
            width: 35%;
        }
        ._8Xhu5_ {
            display: flex;
            align-items: center;
        }

        .EOdsa-:first-child {
            border-top-right-radius: 0;
            border-bottom-right-radius: 0;
        }
        .EOdsa- {
            outline: none;
            cursor: pointer;
            border: 0;
            font-size: .875rem;
            font-weight: 300;
            line-height: 1;
            letter-spacing: 0;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: background-color .1s cubic-bezier(.4,0,.6,1);
            border: 1px solid rgba(0,0,0,.09);
            border-radius: 2px;
            background: transparent;
            color: rgba(0,0,0,.8);
            width: 32px;
            height: 32px;
        }

        .v3H4Zf {
            width: 40px;
            height: 32px;
            border-left: 0;
            border-right: 0;
            font-size: 16px;
            font-weight: 400;
            box-sizing: border-box;
            text-align: center;
            cursor: text;
            border-radius: 0;
            -webkit-appearance: none;
        }

        .ofQLuG {
            /*display: flex;
            align-items: center;
            justify-content: center;*/
            text-align: center;
            width: 20%;
            color: #ee4d2d;
        }
        .mhcjog {
            width: 15%;
            text-transform: capitalize;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .fX1Y2g {
            cursor: pointer;
            background: none;
            border: 0;
        }

        .iGlIrs {
            cursor: pointer;
            background: 0;
            border: 0;
        }

        .fyYBP1 {
            display: flex;
            justify-content: flex-end;
            align-items: center;
        }

        .aiyQAr {
            margin-left: 10px;
            display: flex;
            align-items: center;
        }

        .A-CcKC {
            font-size: 16px;
            color: #222;
            line-height: 19px;
        }
        .WC0us- {
            font-size: 24px;
            line-height: 28px;
            margin-left: 5px;
            color: #ee4d2d;
        }

        .pay-container {
            margin-top:20px;
            display: flex;
            justify-content: flex-end;
            align-items: center;
            box-sizing:border-box;
            width:100%;
        }

        .shopee-button-solid {
            padding: 13px 36px;
            margin: 0 22px 0 15px;
            text-transform: capitalize;
            font-weight: 500;
            height: 3.5rem;
            box-sizing: border-box;
            font-size: 1rem;
            border-radius: 2px;
            width: 13.125rem;
            position: relative;
            overflow: visible;
            outline: 0;
            background: #ee4d2d;
            cursor: pointer;
            border: 0;
            line-height: 1.5;
            letter-spacing: 0;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #fff;
            transition: opacity .2s ease;
            user-select: none;
            box-shadow: 0 1px 1px 0 rgba(0,0,0,.09);
        }

        .TTXpRG {
            width: 100%;
        }

        .s1Gxkq {
            box-shadow: 0 -10px 10px 0 rgba(0,0,0,.09);
            border-radius: 3px;
            border: 1px solid rgba(0,0,0,.09);
            background: #fff;
            padding: 30px 5px;
            margin: 5px 5px 20px 5px;
            z-index: 2;
            position: -webkit-sticky; /* Safari */
            position: sticky;
            bottom: 0px;
        }
        .s1Gxkq-sum {
            display: flex;
            align-items: center;
        }
        .main-container{
            padding:5px;
        }
        .cart-empty{
            display:none;
            text-align: center;
        }
        .sample-selected-model{
            display: none;
        }
    </style>
</head>
<body onload="RefreshRealOfCartCookieAndGet()">
    <div id="biggestContainer">
        @Html.Partial("~/Views/Shared/biggestContainer_Top.cshtml")
        <p id="list-cart-cookie-object" style="display:none;">@ViewData["listCartCookieObject"]</p>
        <div class="sample-selected-model">
            <div class="zoXdNN" data-model-id="">
                <div class="checkbox-name">
                    <div class="mcsiKT">
                        <input class="stardust-checkbox__input model-checkbox-input" type="checkbox" onclick="ClickModelCheckBox(this)">
                    </div>
                    <div class="eUrDQm">
                        <div class="LAQKxn">
                            <a class="item-url"title="Sách Ehon Kĩ Năng Sống Cho Bé (1-6 tuổi) - Miu Bé Nhỏ - Lẻ tùy chọn" href="/Sách-Ehon-Kĩ-Năng-Sống-Cho-Bé-(1-6-tuổi)-Miu-Bé-Nhỏ-Lẻ-tùy-chọn-i.137637267.11045712091?xptdk=77506fc9-816a-4d32-837d-3c81356a5dee">
                                <img class="WanNdG" src="https://down-vn.img.susercontent.com/file/vn-11134207-7r98o-lkkyikcwkaui58" alt="product image">
                            </a>
                            <div class="TyNN8t">
                                <a class="JB57cn item-url" title="Sách Ehon Kĩ Năng Sống Cho Bé (1-6 tuổi) - Miu Bé Nhỏ - Lẻ tùy chọn" href="/Sách-Ehon-Kĩ-Năng-Sống-Cho-Bé-(1-6-tuổi)-Miu-Bé-Nhỏ-Lẻ-tùy-chọn-i.137637267.11045712091?xptdk=77506fc9-816a-4d32-837d-3c81356a5dee">
                                    Sách Ehon Kĩ Năng Sống Cho Bé (1-6 tuổi) - Miu Bé Nhỏ - Lẻ tùy chọn
                                </a>
                                <div style="margin-top:10px;" class="dcPz7Y">ĐỪNGTHỨCKHUYA.Songng</div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="price-quantity-sum-delete">
                    <div class="G7E4B7">
                        <div style="text-align:center;">
                            <span class="M-AAFK vWt6ZL">₫39.000</span>
                            <span class="M-AAFK">₫29.800</span>
                        </div>
                    </div>
                    <div class="MRh9G6">
                        <div class="_8Xhu5_ shopee-input-quantity">
                            <button class="EOdsa-" onclick="Decrease(this)">
                                <svg enable-background="new 0 0 10 10" viewBox="0 0 10 10" x="0" y="0" class="shopee-svg-icon">
                                    <polygon points="4.5 4.5 3.5 4.5 0 4.5 0 5.5 3.5 5.5 4.5 5.5 10 5.5 10 4.5"></polygon>
                                </svg>
                            </button>
                            <input class="EOdsa- v3H4Zf" type="text" value="4" oninput="ValidateInput(this)">
                            <button class="EOdsa-"  onclick="Increase(this)">
                                <svg enable-background="new 0 0 10 10" viewBox="0 0 10 10" x="0" y="0" class="shopee-svg-icon icon-plus-sign">
                                    <polygon points="10 4.5 5.5 4.5 5.5 0 4.5 0 4.5 4.5 0 4.5 0 5.5 4.5 5.5 4.5 10 5.5 10 5.5 5.5 10 5.5">
                                    </polygon>
                                </svg>
                            </button>
                        </div>
                        <div class="max-quantity" style="padding-top:5px;">
                            4992 sản phẩm có sẵn
                        </div>
                    </div>
                    <div class="ofQLuG">
                        <span>₫119.200</span>
                    </div>
                    <div class="mhcjog">
                        <button class="fX1Y2g" onclick="DeleteModel(this)">Xóa</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="cart-empty">
            <strong>Bạn chưa chọn sản phẩm nào.</strong>
            <p>Quay về <a href="/" title="">trang chọn sản phẩm</a></p>
        </div>
        <div class="main-container">
            <div class="BjIo5w">
                <div class="checkbox-name-header">
                    <div class="mcsiKT mcsiKT-header">
                        <input class="stardust-checkbox__input" type="checkbox">
                    </div>
                    <div class="yl931K">Sản Phẩm</div>
                </div>
                <div class="price-quantity-sum-delete-header">
                    <div class="pZMZa7">Đơn Giá</div>
                    <div class="lKFOxX">Số Lượng</div>
                    <div class="_5f317z">Số Tiền</div>
                    <div class="_4E7yJ">Thao Tác</div>
                </div>
            </div>
            <div class="contianer-selected-model">
            </div>
            <div class="s1Gxkq">
                <div class="s1Gxkq-sum">
                    <div class="mcsiKT">
                        <input class="stardust-checkbox__input all-model-checkbox-input" type="checkbox" onclick="ClickAllModelCheckBox(this)">
                    </div>
                    <button class="iGlIrs">Chọn Tất Cả (50)</button>
                </div>
                <div class="pay-container">
                    <div class="aiyQAr">
                        <div class="A-CcKC">
                            Tổng thanh toán (0 Sản phẩm):
                        </div>
                        <div class="WC0us-"><sup>₫</sup>417.200</div>
                    </div>
                    <button class="shopee-button-solid" onclick="BuyNow()"><span class="TTXpRG">Mua hàng</span></button>
                </div>
            </div>
        </div>
        @Html.Partial("~/Views/Shared/biggestContainer_Bottom.cshtml")
    </div>

    <script src="~/Scripts/web.play.with.me.update.width.js"></script>
    <script src="~/Scripts/web.play.with.me.common.js"></script>
    <script src="~/Scripts/web.play.with.me.cart.cookie.js"></script>
    <script>
        // Khi tích/bỏ tích chọn mua sẽ không được cập nhật vào real cart cookie,
        // chỉ xóa sản phẩm, thay đổi số lượng chọn là được cập nhật nếu cookie có đối ứng
        let listCartCookieObject; // list cart cookie object server trả về

        ChangeLayoutForSmallScreen();

        LoadCart();

        // Thay đổi hiển thị khi hiển thị trên màn hình điện thoại
        function ChangeLayoutForSmallScreen() {
            if (scrWidth >= 800)
                return;

            // Bỏ padding
            document.getElementsByClassName("main-container")[0].style.padding = "0px";
            document.getElementsByClassName("BjIo5w")[0].style.padding = "0px";
            document.getElementsByClassName("BjIo5w")[0].style.marginRight = "0px";
            document.getElementsByClassName("BjIo5w")[0].style.marginLeft = "0px";

            document.getElementsByClassName("contianer-selected-model")[0].style.padding = "0px";
            document.getElementsByClassName("contianer-selected-model")[0].style.marginRight = "0px";
            document.getElementsByClassName("contianer-selected-model")[0].style.marginLeft = "0px";


            document.getElementsByClassName("s1Gxkq")[0].style.paddingRight = "0px";
            document.getElementsByClassName("s1Gxkq")[0].style.paddingLeft = "0px";
            document.getElementsByClassName("s1Gxkq")[0].style.marginRight = "0px";
            document.getElementsByClassName("s1Gxkq")[0].style.marginLeft = "0px";

            // Ẩn cột sản phẩm hàng tiêu đề
            document.getElementsByClassName("checkbox-name-header")[0].style.display = "none";
            document.getElementsByClassName("price-quantity-sum-delete-header")[0].style.width = "100%";

            // Chia row thành 2 hàng
            document.getElementsByClassName("zoXdNN")[0].style.display = "block";
            document.getElementsByClassName("checkbox-name")[0].style.width = "100%";
            document.getElementsByClassName("price-quantity-sum-delete")[0].style.width = "100%";
            document.getElementsByClassName("price-quantity-sum-delete")[0].style.marginTop = "10px";

            // Set chiều rộng nút mua hàng về auto
            document.getElementsByClassName("shopee-button-solid")[0].style.width = "auto";
        }

        function CreateSelectedModel() {
            if (DEBUG) {
                console.log("CreateSelectedModel CALL");
                console.log("listCartCookieObject.length: " + listCartCookieObject.length);
            }
            // Lấy mẫu
            let sample = document.getElementsByClassName("sample-selected-model")[0].firstElementChild;
            let containerModel = document.getElementsByClassName("contianer-selected-model")[0];

            let length = listCartCookieObject.length;

            // Sinh bản sao
            for (let i = 0; i < length; i++) {
                let obj = listCartCookieObject[i];
                let clone = sample.cloneNode(true);
                clone.setAttribute("data-model-id", obj.id.toString());
                // Cập nhật dữ liệu bản sao
                clone.getElementsByClassName("model-checkbox-input")[0].checked = Boolean(obj.real);
                clone.getElementsByClassName("WanNdG")[0].src = obj.imageSrc;

                let listA = clone.getElementsByClassName("item-url");
                listA[0].title = obj.itemName;
                listA[0].href = "/Home/Item?id=" + obj.itemId;

                listA[1].title = obj.itemName;
                listA[1].href = "/Home/Item?id=" + obj.itemId;

                clone.getElementsByClassName("JB57cn")[0].innerHTML = obj.itemName;
                clone.getElementsByClassName("dcPz7Y")[0].innerHTML = obj.modelName;

                clone.getElementsByClassName("vWt6ZL")[0].innerHTML = "<sup>₫</sup>" + ConvertMoneyToText(obj.bookCoverPrice);
                clone.getElementsByClassName("M-AAFK")[1].innerHTML = "<sup>₫</sup>" + ConvertMoneyToText(obj.price);

                clone.getElementsByClassName("v3H4Zf")[0].value = obj.q;

                clone.getElementsByClassName("max-quantity")[0].innerHTML = obj.quantity + " sản phẩm có sẵn";

                clone.getElementsByClassName("ofQLuG")[0].innerHTML = "<sup>₫</sup>" + ConvertMoneyToText(obj.q * obj.price);

                containerModel.appendChild(clone);
            }

            ShowSumMoney();
            ShowCheckboxAll();
        }

        function LoadCart() {
            listCartCookieObject = JSON.parse(document.getElementById("list-cart-cookie-object").textContent);
            if (DEBUG) {
                console.log(JSON.stringify(listCartCookieObject));
            }
            if (listCartCookieObject == null || listCartCookieObject.length == 0) {
                document.getElementsByClassName("cart-empty")[0].style.display = "block";
                document.getElementsByClassName("main-container")[0].style.display = "none";
                return;
            }
            // Có những sản phẩm số lượng trong kho nhỏ hơn số lượng khách đã chọn, cập nhật lại cookie và list obj
            let length = listCartCookieObject.length;

            for (let i = 0; i < length; i++) {
                let obj = listCartCookieObject[i];
                if (obj.q > obj.quantity) {
                    obj.q = obj.quantity;
                }
            }

            CreateSelectedModel();
        }

        // Hiển thị tổng tiền thanh toán
        function ShowSumMoney() {
            let length = listCartCookieObject.length;
            let count = 0;
            let sumMoney = 0;
            for (let i = 0; i < length; i++) {
                if (listCartCookieObject[i].real == 1) {
                    sumMoney = sumMoney + listCartCookieObject[i].q * listCartCookieObject[i].price;
                    count++;
                }
            }
            document.getElementsByClassName("A-CcKC")[0].innerHTML = "Tổng thanh toán (" + count + " Sản phẩm):"
            document.getElementsByClassName("WC0us-")[0].innerHTML = "<sup>₫</sup>" + ConvertMoneyToText(sumMoney);
            if (DEBUG) {
                console.log("ShowSumMoney CALL " + ConvertMoneyToText(sumMoney));
            }
        }

        // Hiển thị tiền thanh toán 1 sản phẩm
        function ShowMoney(model) {
            let id = parseInt(model.getAttribute("data-model-id"));
            let obj = GetObjFromListAndId(id, listCartCookieObject);
            model.getElementsByClassName("ofQLuG")[0].innerHTML = "<sup>₫</sup>" + ConvertMoneyToText(obj.q * obj.price);
        }

        // Hiển thị checkbox tất cả
        function ShowCheckboxAll() {
            document.getElementsByClassName("iGlIrs")[0].innerHTML = "Chọn Tất Cả (" + listCartCookieObject.length + ")";

            // Nếu tất cả sản phẩm được tích
            let isAll = true;
            let list = document.getElementsByClassName("contianer-selected-model")[0].children;
            for (let i = 0; i < list.length; i++) {
                if (list[i].getElementsByClassName("model-checkbox-input")[0].checked == false) {
                    isAll = false;
                    break;
                }
            }
            document.getElementsByClassName("all-model-checkbox-input")[0].checked = isAll;
            if (DEBUG) {
                console.log("ShowCheckboxAll CALL isAll:" + isAll);
            }
        }

        function ClickModelCheckBox(element) {
            let model = element.parentElement.parentElement.parentElement;
            UpdateModelCheckbox(model, element.checked)
        }

        // Khi click check box model, cập nhật vào listCartCookieObject
        function UpdateModelCheckbox(model, isChecked) {
            let id = parseInt(model.getAttribute("data-model-id"));
            let obj = GetObjFromListAndId(id, listCartCookieObject);
            if (isChecked) {
                obj.real = 1;
            } else {
                obj.real = 0;
            }

            ShowCheckboxAll();
            ShowSumMoney();
        }

        function ClickAllModelCheckBox(element) {
            let isChecked = element.checked;

            let listModel = document.getElementsByClassName("contianer-selected-model")[0].children;
            for (let i = 0; i < listModel.length; i++) {
                listModel[i].getElementsByClassName("model-checkbox-input")[0].checked = isChecked;

                if (isChecked) {
                    listCartCookieObject[i].real = 1;
                } else {
                    listCartCookieObject[i].real = 0;
                }
            }

            if (DEBUG) {
                console.log(JSON.stringify(listCartCookieObject));
            }
            ShowSumMoney();
        }

        // Lấy số lượng max khách hàng có thể chọn
        function GetMaxQuantityInputInCartPage(model) {
            let id = parseInt(model.getAttribute("data-model-id"));
            let obj = GetObjFromListAndId(id, listCartCookieObject);
            return obj.quantity;
        }

        // Cập nhật listCartCookieObject, cart cookie khi thay đổi số lượng muốn mua
        // element là input tag
        function UpdateWhenChangeInputQuantity(model, element) {
            let id = parseInt(model.getAttribute("data-model-id"));
            let obj = GetObjFromListAndId(id, listCartCookieObject);
            obj.q = ConvertToInt(element.value);

            UpdateQuantityOfCookie(obj);
        }

        function ValidateInput(element) {
            let model = element.parentElement.parentElement.parentElement.parentElement;
            let newInput = element.value;
            let iInput = 0;
            if (IsNumeric(newInput)) {
                iInput = ConvertToInt(newInput);
                let maxQuantity = GetMaxQuantityInputInCartPage(model);
                if (iInput === 0) {
                    iInput = 1;
                    if (maxQuantity == 0) {
                        iInput = 0;
                    }
                }

                if (iInput > maxQuantity) {
                    iInput = maxQuantity;
                    CreateMustClickOkModal("Cửa hàng chỉ còn " + maxQuantity + " sản phẩm.", null);
                }
            }
            element.value = iInput.toString();
            UpdateWhenChangeInputQuantity(model, element);
            ShowSumMoney();
            ShowMoney(model);
        }

        // element là button giảm 1 số lượng đặt hàng
        function Decrease(element) {
            let eInput = element.nextElementSibling;
            let iInput = ConvertToInt(eInput.value);
            if (iInput > 1) {
                iInput = iInput - 1;
                eInput.value = iInput.toString();
            }

            let model = element.parentElement.parentElement.parentElement.parentElement;
            UpdateWhenChangeInputQuantity(model, eInput);
            ShowSumMoney();
            ShowMoney(model);
        }

        // element là button giảm 1 số lượng đặt hàng
        function Increase(element) {
            let eInput = element.previousElementSibling;
            let iInput = ConvertToInt(eInput.value);

            let model = element.parentElement.parentElement.parentElement.parentElement;
            let maxQuantity = GetMaxQuantityInputInCartPage(model);

            if (iInput < maxQuantity) {
                iInput = iInput + 1;
                eInput.value = iInput.toString();
            }
            else {
                CreateMustClickOkModal("Cửa hàng chỉ còn " + maxQuantity + " sản phẩm.", null);
            }

            UpdateWhenChangeInputQuantity(model, eInput);
            ShowSumMoney();
            ShowMoney(model);
        }

        // element là button xóa
        function DeleteModel(element) {
            let model = element.parentElement.parentElement.parentElement;
            let id = parseInt(model.getAttribute("data-model-id"));
            let length = listCartCookieObject.length;
            for (let i = 0; i < length; i++) {
                if (listCartCookieObject[i].id == id) {
                    DeleteOneCartCookie(listCartCookieObject[i]);
                    listCartCookieObject.splice(i, 1);
                    break;
                }
            }
            model.remove();

            ShowSumMoney();
            ShowCheckboxAll();

            // Giỏ hàng trống
            if (listCartCookieObject.length == 0) {
                document.getElementsByClassName("cart-empty")[0].style.display = "block";
                document.getElementsByClassName("main-container")[0].style.display = "none";
                return;
            }
        }

        function BuyNow() {
            // Khách vãng lai
            // Chưa sản phẩm / model nào được chọn để mua
            let isSelected = false;
            let length = listCartCookieObject.length;
            for (let i = 0; i < length; i++) {
                if (listCartCookieObject[i].real == 1) {
                    isSelected = true;
                    break;
                }
            }
            if (!isSelected) {
                CreateMustClickOkModal("Bạn vẫn chưa chọn sản phẩm nào để mua.", null)
                return;
            }
            // Tạo string dạng cookie của những sản phẩm chọn mua và thêm vào url như query
            let listReal = [];
            for (let i = 0; i < length; i++) {
                if (listCartCookieObject[i].real == 1) {
                    listReal.push(listCartCookieObject[i]);
                }
            }
            let cookie = GetCartCookieFromListCartCookie(listReal);
            let cookieBase64 = window.btoa(cookie);
            if (DEBUG) {
                console.log("Cart page BuyNow CALL cookie: " + cookieBase64);
            }
            location.href = "/Home/Checkout?cart=" + cookieBase64;
        }

    </script>
</body>
</html>
