
@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    @Html.Partial("~/Views/Shared/Head.cshtml")
    <link rel="stylesheet" href="~/Content/web.play.with.me.modal.common.css">
    <style>
        .address-model {
            /*margin-bottom: 70px;*/
            margin-top: 15px;
            width: 100%;
        }

        .letter-boder {
            height: 3px;
            width: 100%;
            background-position-x: -30px;
            background-size: 116px 3px;
            background-image: repeating-linear-gradient(45deg,#6fa6d6,#6fa6d6 33px,transparent 0,transparent 41px,#f18d9b 0,#f18d9b 74px,transparent 0,transparent 82px);
        }

        .address-detail {
            padding: 28px 5px 24px;
        }

        .address-icon {
            display: flex;
            align-items: center;
            font-size: 1.125rem;
            color: #ee4d2d;
            margin-bottom: 20px;
            text-transform: capitalize;
            flex: 1 1 auto;
            margin-right: 9px
        }

        .Iafoll {
            display: flex;
            margin-right: 9px;
        }

        .icon-location-marker {
            width: 12px;
            height: 16px;
            color: #ee4d2d;
            fill: currentColor;
            display: inline-block;
        }

        h2 {
            margin: 0;
            padding: 0;
            font-size: inherit;
            font-weight: inherit;
            line-height: inherit;
            color: inherit;
        }

        .address-container {
            box-shadow: 0 1px 1px 0 rgba(0,0,0,.05);
            background: #fff;
            border-radius: 3px;
        }

        .address-content {
            display: flex;
            align-items: center;
            font-size: 1rem;
            word-break: break-word;
            flex-wrap: wrap;
        }

        .address-name-phone {
            font-weight: 700;
            color: #222;
        }

        .address-address {
            margin: 5px;
            word-break: break-word;
        }

        .address-default {
            padding: 2px 5px;
            margin: 5px;
            color: #ee4d2d;
            border-radius: 1px;
            border: 0.5px solid;
            font-size: 10px;
            text-transform: capitalize;
            flex-shrink: 0;
        }

        button.change-address-btn {
            color: #4080ee;
            text-transform: capitalize;
            /*margin-left: 2.5rem;*/
            cursor: pointer;
            background: none;
            border: 0;
            padding: 0;
            margin: 5px;
            cursor: pointer;
            text-align: center;
        }

        .selected_model {
            box-shadow: 0 1px 1px 0 rgba(0,0,0,.05);
            border-radius: 3px;
            margin-top: 12px;
        }

        .ktatB- {
            flex: 2;
            text-align: left;
        }

        ._6HCfS6 {
            display: flex;
            align-items: center;
            font-size: 18px;
            color: #222;
        }

        .jNp-ZB {
            flex: 1;
            justify-content: center;
            text-align: center;
        }

        .LBqTli {
            flex: 1;
            text-align: center;
        }

        .model-container-header {
            height: 50px;
            padding: 10px 5px;
            background: #fff;
            box-shadow: 0 1px 1px 0 rgba(0,0,0,.09);
            border-radius: 3px;
            display: flex;
            align-items: center;
        }

        /*.model-container {
            background: #fff;
            box-shadow: 0 1px 1px 0 rgba(0,0,0,.09);
            border-radius: 3px;
            padding: 10px 5px;
            display: flex;
            overflow: hidden;
            text-overflow: ellipsis;
            font-size: 14px;
            color: #222;
            min-height: 55px;
        }*/
        .model-wrapper {
            background: #fff;
            box-shadow: 0 1px 1px 0 rgba(0,0,0,.09);
            border-radius: 3px;
            padding: 10px 5px;
            display: flex;
            overflow: hidden;
            text-overflow: ellipsis;
            font-size: 14px;
            color: #222;
            min-height: 55px;
        }

        .EOqcX3 {
            flex: 2;
            overflow: hidden;
            text-overflow: ellipsis;
            display: flex;
            /*justify-content: center;*/
            align-items: center;
        }

        img {
            border: 0;
            width: 40px;
            height: 40px;
        }

        .item-name, .model-name {
            margin: 0 5px;
            display: flex;
            flex-direction: column;
            justify-content: center;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .h3ONzh {
            flex: 1;
            /*overflow: hidden;
            text-overflow: ellipsis;*/
            overflow-wrap: break-word;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .fHRPUO {
            flex: 1;
            font-weight: 500;
            /*overflow: hidden;
            text-overflow: ellipsis;*/
            overflow-wrap: break-word;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .U4A1mu {
            display: flex;
            justify-content: flex-end;
            background-color: #fafdff;
            min-width: 0;
            min-height: 0;
            border-bottom: 1px dashed rgba(0,0,0,.09);
        }

        .OUah6W {
            display: flex;
            flex-direction: column;
            min-width: 0;
            min-height: 0;
            font-size: 14px;
        }

        .message-to-shop {
            display: flex;
            align-items: center;
            margin: 15px 0px;
            padding: 5px 10px;
            background-color: white;
            border-radius: 3px;
        }

        .peusTR {
            width: 100%;
        }

            .peusTR input {
                padding: 4px 12px;
                width: 100%;
                height: 40px;
                box-sizing: border-box;
                background-color: initial;
                outline: none;
                font-size: .875rem;
                min-width: 0;
                color: #222;
                border: 1px solid rgba(0,0,0,.14);
                border-radius: 2px;
            }

        .payment-method {
            display: flex;
            align-items: center;
            min-height: 90px;
            padding-left: 30px;
            padding-right: 10px;
            box-sizing: border-box;
            background-color: white;
            margin: 15px 0px;
            border-radius: 3px;
        }

        .SzEjHI {
            width: 200px;
            font-size: 1.25rem;
            color: #222;
            flex: 1;
        }

        .KoRB7y {
            font-size: 14px;
            color: #222;
            font-size: 1rem;
        }

        .payment-infor {
            background: #fffefb;
            box-shadow: 0 1px 1px 0 rgba(0,0,0,.05);
            border-top: 1px solid #f1f0ed;
            padding-top: 15px;
        }

        .flex-end {
            display: flex;
            justify-content: flex-end;
            align-items: center;
            margin: 20px;
        }

        .money-padding {
            min-width: 130px;
            text-align: end;
        }

        .money-sum {
            height: 50px;
            font-size: 28px;
            font-weight: 500;
            color: #ee4d2d;
        }

        .money-title {
            width: 120px;
        }

        .order-btn {
            background: #ee4d2d;
            color: #fff;
            display: flex;
            align-items: center;
            justify-content: center;
            text-transform: capitalize;
            max-width: 250px;
            min-width: 8.25rem;
            height: 48px;
            border: 1px solid rgba(0,0,0,.09);
            box-shadow: 0 1px 1px 0 rgba(0,0,0,.03);
            border-radius: 2px !important;
            outline: none;
        }

        .sample-model {
            display: none;
        }

        .cart-empty {
            display: none;
            text-align: center;
        }
    </style>
</head>
<body>
    <div id="biggestContainer">
        @Html.Partial("~/Views/Shared/biggestContainer_Top.cshtml")
        <div class="sample-model">
            <div class="model-wrapper">
                <div class="EOqcX3">
                    <img class="rTOisL" alt="product image" src="https://down-vn.img.susercontent.com/file/vn-11134207-7qukw-liwhf99gb1n039_tn" width="40" height="40">
                    <div>
                        <span class="item-name">
                            Gạo Thơm RVT Vinaseed Túi 5kg - Nhà phân phối chính hãng - Giá Sỉ, Date mới
                        </span>
                        <span class="model-name">
                            Gạo Thơm RVT Vinaseed Túi 5kg - Nhà phân phối chính hãng - Giá Sỉ, Date mới
                        </span>
                    </div>
                </div>

                <div class="h3ONzh price-model">₫1.300.000</div>
                <div class="h3ONzh quantity-model">1</div>
                <div class="fHRPUO money-model">₫1.300.000</div>
            </div>
        </div>
        <div class="cart-empty">
            <strong>Bạn chưa chọn sản phẩm nào.</strong>
            <p>Quay về <a href="/" title="">trang chọn sản phẩm</a></p>
        </div>
        <div class="main-container">
            <div class="address-model">
                <div class="address-container">
                    <div class="letter-boder"></div>
                    <div class="address-detail">
                        <div class="address-icon">
                            <div class="Iafoll">
                                <svg height="16" viewBox="0 0 12 16" width="12" class="icon-location-marker">
                                    <path d="M6 3.2c1.506 0 2.727 1.195 2.727 2.667 0 1.473-1.22 2.666-2.727 2.666S3.273 7.34 3.273 5.867C3.273 4.395 4.493 3.2 6 3.2zM0 6c0-3.315 2.686-6 6-6s6 2.685 6 6c0 2.498-1.964 5.742-6 9.933C1.613 11.743 0 8.498 0 6z" fill-rule="evenodd"></path>
                                </svg>
                            </div>
                            <h2>Địa chỉ nhận hàng</h2>
                        </div>
                        <div class="address-content">
                            <div class="address-name-phone">Huệ hoàng (+84) 383519872</div>
                            <div class="address-address">Số 24 , Ngõ Việt Hà 2, khu tập thể Việt Hà, tổ dân phố Phú Minh, Phường Cổ Nhuế 2, Quận Bắc Từ Liêm, Hà Nội</div>
                            <div class="address-default">Mặc định</div>
                            <button type="button" class="change-address-btn">Thay đổi</button>
                        </div>
                    </div>
                </div>
                <div class="selected_model">
                    <div class="model-container-header">
                        <div class="ktatB-">
                            <h2 class="_6HCfS6">Sản phẩm</h2>
                        </div>
                        <div class="jNp-ZB">Đơn giá</div>
                        <div class="jNp-ZB">Số lượng</div>
                        <div class="LBqTli">Thành tiền</div>
                    </div>
                    <div class="model-container">

                    </div>
                </div>
                <div class="message-to-shop">
                    <div>
                        <span style="padding-right:10px">Lời nhắn:</span>
                    </div>
                    <div class="peusTR">
                        <input class="gQuJxM" type="text" placeholder="Lưu ý cho Người bán..." value="">
                    </div>
                </div>
            </div>
            <div class="payment-method">
                <div class="SzEjHI">Phương thức thanh toán</div>
                <div class="KoRB7y">Thanh toán khi nhận hàng</div>
            </div>
            <div class="payment-infor">
                <div class="flex-end">
                    <div class="money-title">Tổng tiền hàng</div>
                    <div class="money-padding model-money-sum">₫405.080</div>
                </div>
                <div class="flex-end">
                    <div class="money-title">Phí vận chuyển</div>
                    <div class="money-padding shipee-fee">₫39.150</div>
                </div>
                <div class="flex-end">
                    <div class="money-title">Tổng thanh toán</div>
                    <div class="money-padding money-sum">₫0</div>
                </div>
                <div class="flex-end">
                    <button type="button" class="order-btn" onclick="Order()">Đặt hàng</button>
                </div>
            </div>
        </div>
        @Html.Partial("~/Views/Shared/Home/CustomerInfor.cshtml")
        @Html.Partial("~/Views/Shared/Home/ListCustomerInfor.cshtml")
    </div>
    <script src="~/Scripts/web.play.with.me.update.width.js"></script>
    <script src="~/Scripts/web.play.with.me.common.js"></script>
    <script src="~/Scripts/web.play.with.me.cart.cookie.js"></script>
    <script src="~/Scripts/web.play.with.me.customer.infor.cookie.js"></script>
    <script src="~/Scripts/web.play.with.me.address.js"></script>
    <script src="~/Scripts/web.play.with.me.action.common.js"></script>
    <script>
        let listCartCookieObject; // list cart cookie object server trả về, đã check real == 1 trên server

        let listCustomerInforCookieObject; // list customer cookie object server trả về

        let currentIndexInforObject = -1; // index địa chỉ nhận hàng hiện tại. Chưa chọn địa chỉ nhận hàng thì dùng thông tin mặc định khi load trang

        let currentIndexInforUpdateObject = -1; // index địa chỉ nhận hàng cập nhật thông tin

        let funcOfChangeAddress = null; // Hàm xử lý sự kiện click nút change-address-btn

        LoadSomething();

        // Sau khi load page, cần thêm thông tin
        async function LoadSomething() {

            await LoadCustomerInfor(); // Load địa chỉ khách trước để tính phí ship

            LoadCart();
        }

        function CreateSelectedModel() {
            // Lấy mẫu
            let sample = document.getElementsByClassName("sample-model")[0].firstElementChild;
            let containerModel = document.getElementsByClassName("model-container")[0];

            let length = listCartCookieObject.length;

            // Sinh bản sao
            for (let i = 0; i < length; i++) {
                let obj = listCartCookieObject[i];

                let clone = sample.cloneNode(true);
                clone.setAttribute("data-model-id", obj.id.toString());

                // Cập nhật dữ liệu bản sao
                clone.getElementsByClassName("rTOisL")[0].src = Get320VersionOfImageSrc(obj.imageSrc);
                clone.getElementsByClassName("item-name")[0].innerHTML = obj.itemName;
                clone.getElementsByClassName("model-name")[0].innerHTML = obj.modelName;
                clone.getElementsByClassName("price-model")[0].innerHTML =
                    ConvertMoneyToTextWithIcon(obj.price);
                clone.getElementsByClassName("quantity-model")[0].innerHTML = obj.q;
                clone.getElementsByClassName("money-model")[0].innerHTML =
                    ConvertMoneyToTextWithIcon(obj.q * obj.price);

                containerModel.appendChild(clone);
            }

            ShowSumMoney();
        }

        async function LoadCart() {
            let responseDB = await CheckoutPageLoadCart(GetValueFromUrlName("cart"));
            if (responseDB.responseText != "null") {
                listCartCookieObject = JSON.parse(responseDB.responseText);
            }
            else {
                listCartCookieObject = null;
            }

            if (listCartCookieObject == null || listCartCookieObject.length == 0) {
                document.getElementsByClassName("cart-empty")[0].style.display = "block";
                document.getElementsByClassName("main-container")[0].style.display = "none";
                return;
            }
            // Có những sản phẩm số lượng trong kho nhỏ hơn số lượng khách đã chọn,
            // nhưng được tính lại phía server

            CreateSelectedModel();
        }

        // Hiển thị tổng tiền thanh toán
        function ShowSumMoney() {
            let length = listCartCookieObject.length;
            let sumMoney = 0;
            for (let i = 0; i < length; i++) {
                sumMoney = sumMoney + listCartCookieObject[i].q * listCartCookieObject[i].price;
            }

            document.getElementsByClassName("model-money-sum")[0].innerHTML =
                ConvertMoneyToTextWithIcon(sumMoney);

            let shipFee = GetShipFee();
            sumMoney = shipFee + sumMoney;
            document.getElementsByClassName("shipee-fee")[0].innerHTML =
                ConvertMoneyToTextWithIcon(shipFee);
            document.getElementsByClassName("money-sum")[0].innerHTML =
                ConvertMoneyToTextWithIcon(sumMoney);
        }

        function GetShipFee() {
            let fee = 0;
            if (currentIndexInforObject != -1) {
                let obj = listCustomerInforCookieObject[currentIndexInforObject];
                if (obj.province == HaNoiCity) {
                    fee = standardShipFeeInHaNoi;
                }
                else {
                    fee = standardShipFeeOutHaNoi;
                }
            }
            return fee;
        }

        async function GetListAddress() {
            const searchParams = new URLSearchParams();
            let query = "/Customer/GetListAddress";

            return await RequestHttpPostPromise(searchParams, query);
        }
        // Chưa địa chỉ nào được chọn (lần đầu vào page chưa tạo địa chỉ, chưa chọn địa chỉ mặc định)
        function ShowAddressDontSelected() {

        }

        // Thêm hàm xử lý sự kiện click nút change-address-btn
        // Xóa hàm xử lý cũ nếu có
        function ChangeAddressClickEvent(element) {
            if (element.getAttribute('listener') === 'true') {
                element.removeEventListener("click", funcOfChangeAddress);
            }
            element.addEventListener('click', funcOfChangeAddress);
        }

        async function LoadCustomerInfor() {

            if (CheckAnonymousCustomer()) {// Khách vãng lai
                // Lấy từ cookie
                listCustomerInforCookieObject = GetListCustomerInforCookieFromCookie();
            }
            else {
                let res = await GetListAddress();
                if (JSON.parse(res.responseText) == null) {
                    await CreateMustClickOkModal("Không lấy được dữ liệu. Vui lòng thử lại sau.", null);
                    // Trả về định dạng giống truy vấn httpPost
                    return GetEasyPromise();
                }
                else {
                    listCustomerInforCookieObject = JSON.parse(res.responseText);
                }
            }

            let isDefaultAdd = false;
            // Tìm địa chỉ mặc định
            for (let i = listCustomerInforCookieObject.length - 1; i >= 0; i--) {
                let obj = listCustomerInforCookieObject[i];
                if (obj.defaultAdd == 1) {
                    currentIndexInforObject = i;
                    ShowCustomerInforFromObj(obj);
                    isDefaultAdd = true;
                    break;
                }
            }

            if (!isDefaultAdd) {
                document.getElementsByClassName("address-name-phone")[0].style.display = "none";
                document.getElementsByClassName("address-address")[0].style.display = "none";
                document.getElementsByClassName("address-default")[0].style.display = "none";
                let changeAddressBtnEle = document.getElementsByClassName("change-address-btn")[0];
                changeAddressBtnEle.innerHTML = "Thêm địa chỉ mới";

                // Chưa địa chỉ nào được chọn là mặc định
                // Hiển thị danh sách địa chỉ trước

                if (funcOfChangeAddress !== null) {
                    changeAddressBtnEle.removeEventListener("click", funcOfChangeAddress);
                }

                if (listCustomerInforCookieObject.length > 0) {
                    funcOfChangeAddress = function () { ShowListCustomerInforModal(); };
                }
                else {
                    funcOfChangeAddress = function () { ShowCustomerInforModal(true, false, null); };
                }
                changeAddressBtnEle.addEventListener("click", funcOfChangeAddress);
            }
            // Trả về định dạng giống truy vấn httpPost
            return GetEasyPromise();
        }

        // Từ obj hiển thị tên, phone, địa chỉ lên checkout page
        function ShowCustomerInforFromObj(obj) {
            // Chưa chọn địa chỉ nhận hàng
            if (currentIndexInforObject == -1) {
                return;
            }

            document.getElementsByClassName("address-name-phone")[0].style.display = "block";
            document.getElementsByClassName("address-address")[0].style.display = "block";

            document.getElementsByClassName("address-name-phone")[0].innerHTML = obj.name + "  " + obj.phone;
            document.getElementsByClassName("address-address")[0].innerHTML =
                obj.detail + ", " + obj.province + ", " + obj.district + ", " + obj.subdistrict;
            if (obj.defaultAdd) {
                document.getElementsByClassName("address-default")[0].style.display = "block";
            }
            else {
                document.getElementsByClassName("address-default")[0].style.display = "none";
            }
            let changeAddressBtnEle = document.getElementsByClassName("change-address-btn")[0];
            changeAddressBtnEle.innerHTML = "Thay đổi";
            if (funcOfChangeAddress !== null) {
                changeAddressBtnEle.removeEventListener("click", funcOfChangeAddress);
            }
            funcOfChangeAddress = function () { ShowListCustomerInforModal(); };
            changeAddressBtnEle.addEventListener("click", funcOfChangeAddress);
        }

        function ShowListCustomerInforModal() {
            document.getElementById("modal-list-customer-infor").style.display = "block";

            // Hiển thị danh sách địa chỉ
            // Lấy mẫu
            let sample = document.getElementsByClassName("sample-customer-infor-container")[0];
            let container = document.getElementsByClassName("list-customer-infor-container")[0];

            let length = listCustomerInforCookieObject.length;

            for (let i = 0; i < length; i++) {
                let obj = listCustomerInforCookieObject[i];
                let clone = sample.cloneNode(true);
                clone.style.display = "flex";
                clone.setAttribute("data-index", i.toString());

                if (currentIndexInforObject == i) {
                    clone.getElementsByClassName("address-radio")[0].checked = true;
                }

                clone.getElementsByClassName("name")[0].innerHTML = obj.name;
                clone.getElementsByClassName("phone")[0].innerHTML = obj.phone;

                clone.getElementsByClassName("detail")[0].innerHTML = obj.detail;
                clone.getElementsByClassName("province-district-subdistrict")[0].innerHTML =
                    obj.subdistrict + ", " + obj.district + ", " + obj.province;

                if (!obj.defaultAdd) {
                    clone.getElementsByClassName("default-address")[0].style.display = "none";
                }
                container.appendChild(clone);
            }
        }

        function ReturnCustomerInforModal() {
            RefreshModalCustomerInfor();
            currentIndexInforUpdateObject = -1;
        }

        async function FinishCustomerInforModal() {
            if (!ValidCustomerInforInput()) {
                return;
            }

            let obj = CreateCookieValueFromInput();
            if (currentIndexInforUpdateObject != -1) {// Cập nhật thông tin vào object
                obj.id = listCustomerInforCookieObject[currentIndexInforUpdateObject].id;
                listCustomerInforCookieObject[currentIndexInforUpdateObject] = obj;
                //Kiểm tra có đặt mặc định
                if (obj.defaultAdd) {
                    // Bỏ mặc định cũ nếu có
                    for (let i = listCustomerInforCookieObject.length - 1; i >= 0; i--) {
                        if (listCustomerInforCookieObject[i].defaultAdd
                            && i != currentIndexInforUpdateObject) {
                            listCustomerInforCookieObject[i].defaultAdd = 0;
                        }
                    }
                }

                // Chọn địa chỉ vừa chỉnh sửa làm địa chỉ nhận hàng
                currentIndexInforObject = currentIndexInforUpdateObject;
            }
            else { // Thêm mới
                //Kiểm tra có đặt mặc đinh
                if (obj.defaultAdd) {
                    // Bỏ mặc định cũ nếu có
                    for (let i = listCustomerInforCookieObject.length - 1; i >= 0; i--) {
                        if (listCustomerInforCookieObject[i].defaultAdd) {
                            listCustomerInforCookieObject[i].defaultAdd = 0;
                        }
                    }
                }
                listCustomerInforCookieObject.push(obj);
                // Chọn địa chỉ vừa thêm mới làm địa chỉ nhận hàng
                currentIndexInforObject = listCustomerInforCookieObject.length - 1;
            }

            if (CheckAnonymousCustomer()) {// Khách vãng lai
                SetCartCookieFromListCustomerInforCookieObject(listCustomerInforCookieObject);
            }
            else { // Khách đăng nhập
                if (currentIndexInforUpdateObject != -1) {// Cập nhật thông tin
                    let res = await UpdateAddress(obj);
                    let resObj = JSON.parse(res.responseText);
                    if (resObj.State != 0) {
                        await CreateMustClickOkModal("Có lỗi xảy ra. Vui lòng thử lại sau.", null);
                        return;
                    }
                }
                else {
                    let res = await InsertAddress(obj);
                    let resObj = JSON.parse(res.responseText);
                    if (resObj.State != 0) {
                        await CreateMustClickOkModal("Có lỗi xảy ra. Vui lòng thử lại sau.", null);
                        return;
                    }

                    // Cập nhật lại id cho obj vừa thêm vào list
                    listCustomerInforCookieObject[listCustomerInforCookieObject.length - 1].id = resObj.myAnything;
                }
            }

            currentIndexInforUpdateObject = -1;

            RefreshModalCustomerInfor();

            // Nếu bên dưới có modal hiển thị danh sách địa chỉ, ta cập nhật lại
            // Xóa địa chỉ khỏi danh sách
            document.getElementsByClassName("list-customer-infor-container")[0].innerHTML = "";
            ShowListCustomerInforModal();
        }

        function DestroyListCustomerInforModal() {
            // Xóa địa chỉ khỏi danh sách
            document.getElementsByClassName("list-customer-infor-container")[0].innerHTML = "";
            document.getElementById("modal-list-customer-infor").style.display = "none";
        }

        // Ý nghĩa: không thay đổi lựa chọn nhận hàng,
        // nhưng lựa chọn cũ có thể đã cập nhật nên cần hiển thị ra checkout page
        function DontConfirmListCustomerInforModal() {
            DestroyListCustomerInforModal();

            // Cập nhật thông tin lựa chọn cũ
            ShowCustomerInforFromObj(listCustomerInforCookieObject[currentIndexInforObject]);

            // Tính lại tiền
            ShowSumMoney();
        }

        // Xác nhận dùng thông tin nào nhận hàng
        function ConfirmListCustomerInforModal() {
            let list = document.getElementsByClassName("list-customer-infor-container")[0].children;
            let length = list.length;
            for (let i = 0; i < length; i++) {
                let ele = list[i];

                if (ele.getElementsByClassName("address-radio")[0].checked) {
                    currentIndexInforObject = parseInt(ele.getAttribute("data-index"));
                    ShowCustomerInforFromObj(listCustomerInforCookieObject[currentIndexInforObject]);
                    break;
                }
            }
            DestroyListCustomerInforModal();

            // Tính lại tiền
            ShowSumMoney();
        }

        function UpdateCustomerInfor(ele) {
            currentIndexInforUpdateObject = parseInt(ele.parentElement.parentElement.getAttribute("data-index"));
            ShowCustomerInforModal(false, true, listCustomerInforCookieObject[currentIndexInforUpdateObject]);
        }

        function objOrderPay(type, value) {
            this.type = type;
            this.value = value;
        }

        // Tạo list thanh toán: tổng tiền hàng, phí ship, tổng thanh toán
        /// 0: Tổng tiền hàng
        /// 1: Phí ship
        /// 2: Khuyến mại khác
        /// 3: Tổng thanh toán = Tổng tiền hàng + Phí ship - Khuyến mại khác
        function GetListOrderPay() {
            let length = listCartCookieObject.length;
            let sumMoney = 0;
            for (let i = 0; i < length; i++) {
                sumMoney = sumMoney + listCartCookieObject[i].q * listCartCookieObject[i].price;
            }
            let listOrderPay = [];
            listOrderPay.push(new objOrderPay(0, sumMoney));

            let shipFee = GetShipFee();
            listOrderPay.push(new objOrderPay(1, shipFee));

            sumMoney = shipFee + sumMoney;
            listOrderPay.push(new objOrderPay(3, sumMoney));

            return listOrderPay;
        }

        // Check lại thông tin đơn hàng bên phía server: mã sản phẩm, số lượng có đủ
        // (vì trong thời gian khách chọn có thể số lượng tồn kho thay đổi), tổng tiền hàng, tiền ship.
        // Đồng thời gửi thông tin địa chỉ, lời nhắn shop
        async function CheckOrderOnSever() {
            const searchParams = new URLSearchParams();
            searchParams.append("cart", JSON.stringify(listCartCookieObject));
            searchParams.append("customerInfor", JSON.stringify(listCustomerInforCookieObject[currentIndexInforObject]));
            let listOrderPay = GetListOrderPay();
            searchParams.append("listOrderPay", JSON.stringify(listOrderPay));
            searchParams.append("noteToShop", document.getElementsByClassName("gQuJxM")[0].value);

            let query = "/Home/CheckOrderOnSever";

            return await RequestHttpPostPromise(searchParams, query);

        }

        async function Order() {
            if (currentIndexInforObject == -1) {
                await CreateMustClickOkModal("Vui lòng cung cấp thông tin người nhận hàng.", null)
                return;
            }
            ShowCircleLoader();
            let responseDB = await CheckOrderOnSever();
            RemoveCircleLoader();

            let result = JSON.parse(responseDB.responseText);
            if (result == null) {
                await CreateMustClickOkModal("Có lỗi, vui lòng thử lại sau.");
                return;
            }
            if (result.State != 0) {
                await CreateMustClickOkModal(result.Message);
                return;
            }
            // Với khách vãng lai
            // Cập nhật lại cart cookie, xóa những sản phẩm đặt hàng thành công
            let length = listCartCookieObject.length;
            for (let i = length - 1; i >= 0; i--) {
                DeleteOneCartCookie(listCartCookieObject[i]);
            }

            await CreateMustClickOkModal("Đặt hàng thành công. Cảm ơn bạn đã mua hàng tại shop.", function () { location.replace("/"); });
        }
    </script>
</body>
</html>
